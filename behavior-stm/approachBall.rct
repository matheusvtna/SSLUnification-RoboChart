import utils

// --------------------------------------------
//              APPROACH BALL
// --------------------------------------------
interface ApproachBallI {
	event startApproachBall
	event stopApproachBall
}

// This state machine makes robot move to ball smoothly.
// It succeeds when the robot touches the ball and
// fails when the robot is not behind the ball or
// close to it.
//
// TODO: Add a FSM output -> makes robot move...
stm ApproachBallSTM {
	// Behavior Tree Control Interfaces.
	requires NodeStatusI
	uses ApproachBallI
	
	// Conditional variables.
	var allyIsBehindBall: boolean
	var allyIsCloseToBall: boolean
	var allyHasBall: boolean
	
	// States.
	initial sInitial
	state sStart {}
	state sApproach {
		entry nodeStatus = NODE_STATUS::RUNNING
	}

	// Transitions.
	transition start {
		from sInitial
		to sStart
	}
	
	transition approachBall {
		from sStart
		to sApproach
		trigger startApproachBall
	}
	
	transition success {		
		from sApproach
		to sStart
		condition allyHasBall
		action nodeStatus = NODE_STATUS::DONE
	}
	
	transition recalculate {
		from sApproach
		to sApproach
		condition (not allyHasBall) /\ not (not allyIsBehindBall \/ not allyIsCloseToBall)
		action nodeStatus = NODE_STATUS::RUNNING
	}
	
	transition fail {
		from sApproach
		to sStart
		condition (not allyIsBehindBall \/ not allyIsCloseToBall)
		action nodeStatus = NODE_STATUS::FAILED
	}
	
	transition abort {		
		from sApproach
		to sStart
		trigger stopApproachBall
		action nodeStatus = NODE_STATUS::ABORTED
	}
}	