package behavior
import utils

// --------------------------------------------
//              APPROACH BALL
// --------------------------------------------
interface ApproachBallI {
	event startApproachBall
	event stopApproachBall
	event approachBallAction: Action
}

// This state machine makes robot move to ball smoothly.
// It succeeds when the robot touches the ball and
// fails when the robot is not behind the ball or
// close to it.
//
// TODO: Add a FSM output -> makes robot move...
stm ApproachBallSTM {
	// Behavior Tree Control Interfaces.
	requires NodeStatusI
	uses ApproachBallI
	
	// Conditional variables.
	var allyIsBehindBall: boolean
	var allyIsCloseToBall: boolean
	var allyHasBall: boolean
	
	// States.
	initial sInitial
	final sFinal
	
	state sWaitStart { }
	
	state sRun {
		initial sInitial
		final sFinal
		
		state sApproach {
			entry nodeStatus = NODE_STATUS::RUNNING
		}

		// Transitions.
		transition start {
			from sInitial
			to sApproach
		}
		
		transition success {		
			from sApproach
			to sFinal
			condition allyHasBall
			action nodeStatus = NODE_STATUS::DONE
		}
		
		transition fail {
			from sApproach
			to sFinal
			condition (not allyIsBehindBall \/ not allyIsCloseToBall)
			action nodeStatus = NODE_STATUS::FAILED
		}
		
		transition recalculate {
			from sApproach
			to sApproach
			condition (not allyHasBall) /\ not (not allyIsBehindBall \/ not allyIsCloseToBall)
			action nodeStatus = NODE_STATUS::RUNNING
		}
		
		
	} 
	
	transition waitStart {
		from sInitial
		to sWaitStart
	}
	
	transition approachBall {
		from sWaitStart
		to sRun
		trigger startApproachBall
	}
	
	transition sucess {
		from sRun
		to sWaitStart
		condition nodeStatus == NODE_STATUS :: DONE
	}
	
	transition fail {
		from sRun
		to sWaitStart
		condition nodeStatus == NODE_STATUS::FAILED
	}
	
	transition abortFromRunning {		
		from sRun
		to sFinal
		trigger stopApproachBall
		action nodeStatus = NODE_STATUS::ABORTED
	}

	transition abortFromStart {
		from sWaitStart
		to sFinal
		trigger stopApproachBall
		action nodeStatus = NODE_STATUS :: ABORTED
	}
}

