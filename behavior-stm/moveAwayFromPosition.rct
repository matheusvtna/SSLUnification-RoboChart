import utils

// --------------------------------------------
//           MOVE AWAY FROM POSITION
// --------------------------------------------
interface MoveAwayFromPositionI {
	event startMoveAwayFromPosition
	event stopMoveAwayFromPosition
}

// This state machine makes robot move away to
// a dangerous position, which can be any point
// in the field. It succeeds when the robot
// is at a certain distance from this point 
// and fails if the robot takes too long to
// move away from position.
//
// TODO: Add a FSM output -> makes robot move...
stm MoveAwayFromPositionSTM {
	// Behavior Tree Control Interfaces.
	requires NodeStatusI
	uses MoveAwayFromPositionI
	
	// Conditional variables.
	var robotIsFarEnoughFromPosition: boolean

	// Constants.	
	const TIME_LIMIT_TO_BEHAVE: nat = 30
		
	// States.
	initial sInitial
	final sFinal
	
	state sStart {}
	
	
	state sMoveAway {
		entry nodeStatus = NODE_STATUS::RUNNING 
	}	
	
	// Transitions.
	transition start {
		from sInitial
		to sStart
	}
	
	transition moveAwayFromPosition {
		from sStart
		to sMoveAway 
		trigger startMoveAwayFromPosition
	}
	
	transition success {		
		from sMoveAway
		to sStart
		condition robotIsFarEnoughFromPosition
		action nodeStatus = NODE_STATUS::DONE
	}
	
	transition recalculate {
		from sMoveAway
		to sMoveAway
		condition (not robotIsFarEnoughFromPosition) /\ (not (sinceEntry(sMoveAway) > TIME_LIMIT_TO_BEHAVE /\ (not robotIsFarEnoughFromPosition)))
		action nodeStatus = NODE_STATUS::RUNNING
	}
	
	transition fail {		
		from sMoveAway
		to sStart
		// How to solve this warning? What this means? 
		condition sinceEntry(sMoveAway) > TIME_LIMIT_TO_BEHAVE /\ (not robotIsFarEnoughFromPosition)
		action nodeStatus = NODE_STATUS::FAILED
	}
	
	transition abortFromRunning {		
		from sMoveAway
		to sFinal
		trigger stopMoveAwayFromPosition
		action nodeStatus = NODE_STATUS::ABORTED
	}
	
	transition abortFromStart {
		from sStart
		to sFinal
		trigger stopMoveAwayFromPosition
		action nodeStatus = NODE_STATUS::ABORTED
	}
}
