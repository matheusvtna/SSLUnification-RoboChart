import utils

// --------------------------------------------
//           MOVE AWAY FROM POSITION
// --------------------------------------------
interface MoveAwayFromPositionI {
	event startMoveAwayFromPosition
	event stopMoveAwayFromPosition
}

// This state machine makes robot move away to
// a dangerous position, which can be any point
// in the field. It succeeds when the robot
// is at a certain distance from this point 
// and fails if the robot takes too long to
// move away from position.
//
// TODO: Add a FSM output -> makes robot move...
stm MoveAwayFromPositionSTM {
	// Behavior Tree Control Interfaces.
	requires NodeStatusI
	uses MoveAwayFromPositionI
	
	// Conditional variables.
	var robotIsFarEnoughFromPosition: boolean

	// Constants.	
	const TIME_LIMIT_TO_BEHAVE: nat = 30
		
	// States.
	initial sInitial
	final sFinal
	
	state sWaitStart {}
	state sRun { 
		
		initial sInitial
		final sFinal
		
		
		state sMoveAway {
			entry nodeStatus = NODE_STATUS::RUNNING 
		}	
		
		transition start {
			from sInitial
			to sMoveAway
		}
		
		transition success {		
			from sMoveAway
			to sFinal
			condition robotIsFarEnoughFromPosition
			action nodeStatus = NODE_STATUS::DONE
		}
		
		transition recalculate {
			from sMoveAway
			to sMoveAway
			condition (not robotIsFarEnoughFromPosition) /\ (not (sinceEntry(sMoveAway) > TIME_LIMIT_TO_BEHAVE /\ (not robotIsFarEnoughFromPosition)))
			action nodeStatus = NODE_STATUS::RUNNING
		}
		
		transition fail {		
			from sMoveAway
			to sFinal
			// How to solve this warning? What this means? 
			condition sinceEntry(sMoveAway) > TIME_LIMIT_TO_BEHAVE /\ (not robotIsFarEnoughFromPosition)
			action nodeStatus = NODE_STATUS::FAILED
		}
		
	}
	
	// Transitions.
	transition waitStart {
		from sInitial
		to sWaitStart
	}
	
	transition moveAwayFromPosition {
		from sWaitStart
		to sRun 
		trigger 
	startMoveAwayFromPosition
	}
	
	transition sucess {
		from sRun
		to sWaitStart
		condition nodeStatus == NODE_STATUS :: DONE
	}
	
	transition fail {
		from sRun
		to sWaitStart
		condition nodeStatus == NODE_STATUS::FAILED
	}
	
	transition abortFromRunning {		
		from sRun
		to sFinal
		trigger stopMoveAwayFromPosition
		action nodeStatus = NODE_STATUS::ABORTED
	}
	
	transition abortFromStart {
		from sWaitStart
		to sFinal
		trigger stopMoveAwayFromPosition
		action nodeStatus = NODE_STATUS::ABORTED
	}
}
