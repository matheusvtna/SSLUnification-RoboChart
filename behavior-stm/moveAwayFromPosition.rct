import utils

// --------------------------------------------
//           MOVE AWAY FROM POSITION
// --------------------------------------------
interface MoveAwayFromPositionI {
	moveAwayFromPosition(frame: Frame, dangerousPosition: Point, distanceThreshold: real)
}

// This operation makes robot move away to
// a dangerous position, which can be any point
// in the field. It succeeds when the robot
// is at a certain distance from this point 
// and fails if the robot takes too long to
// move away from position.
//
// @param frame: Frame.
// @param dangerousPosition: Point.
// @param distanceThreshold: real.
//
// TODO: Add a FSM output -> makes robot move...
operation moveAwayFromPosition(frame: Frame, dangerousPosition: Point, distanceThreshold: real) {
	requires NodeStatusI
	requires GetDistanceBetweenTwoPointsI
	
	var robotPosition: Point  
	var robotIsFarEnoughFromPosition: boolean
	
	const TIME_LIMIT_TO_BEHAVE: nat = 30
		
	// States.
	initial sInitial
	state sMoveAway {
		entry 
			nodeStatus = NODE_STATUS::RUNNING
// Commenting the calls of the following operations for the FDR's validation						
//			robotPosition = frame.robot.position; 
//			GetDistanceBetweenTwoPoints(robotPosition, dangerousPosition); 
//			robotIsFarEnoughFromPosition = getDistanceBetweenTwoPointsResult >= distanceThreshold 
	}	
	final sFinal
	
	// Transitions.
	transition start {
		from sInitial
		to sMoveAway
	}
	
	transition success {		
		from sMoveAway
		to sFinal
		condition robotIsFarEnoughFromPosition
		action nodeStatus = NODE_STATUS::DONE
	}
	
	transition recalculate {
		from sMoveAway
		to sMoveAway
		condition (not robotIsFarEnoughFromPosition) /\ (not (sinceEntry(sMoveAway) > TIME_LIMIT_TO_BEHAVE /\ (not robotIsFarEnoughFromPosition)))
		action nodeStatus = NODE_STATUS::RUNNING
	}
	
	transition fail {		
		from sMoveAway
		to sFinal
		// How to solve this warning? What this means? 
		condition sinceEntry(sMoveAway) > TIME_LIMIT_TO_BEHAVE /\ (not robotIsFarEnoughFromPosition)
		action nodeStatus = NODE_STATUS::FAILED
	}
}
