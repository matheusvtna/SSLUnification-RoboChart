import utils

// --------------------------------------------
//              GO TO BEHIND BALL
// --------------------------------------------
interface GoToBehindBallI {
	goToBehindBall()
}

// This operation makes robot move to behind the
// ball. It succeeds when the robot is at the point
// behind the ball looking to targetPosition.
//
// @param targetPosition: Point.
// @param angleThreshold: real.
//
// TODO: Add a FSM output -> makes robot move...
operation goToBehindBall() {
	// Behavior Tree Control Interfaces.
	requires NodeStatusI
	uses BehaviorTreeControl

	// Conditional variables.
	var allyIsBehindBall: boolean
	var allyIsCloseToBall: boolean
	var allyIsPushingBallWithHisBack: boolean

	// States.
	initial sInitial
	state sGoToBehindBall {
		entry nodeStatus = NODE_STATUS::RUNNING			
	}	
	final sFinal
	
	// Transitions.
	transition goToBehindBall {
		from sInitial
		to sGoToBehindBall
		// action moveToBehindBall()
	}
	
	transition success {		
		from sGoToBehindBall
		to sFinal
		condition (allyIsBehindBall /\ allyIsCloseToBall) 
		action nodeStatus = NODE_STATUS::DONE
	}
	
	transition recalculate {
		from sGoToBehindBall
		to sGoToBehindBall
		condition not (allyIsBehindBall /\ allyIsCloseToBall) /\ not allyIsPushingBallWithHisBack
		action nodeStatus = NODE_STATUS::RUNNING
	}
	
	transition fail {		
		from sGoToBehindBall
		to sFinal
		condition allyIsPushingBallWithHisBack
		action nodeStatus = NODE_STATUS::FAILED
	}
	
	transition abort {		
		from sGoToBehindBall
		to sFinal
		trigger behaviorHasChanged
		action nodeStatus = NODE_STATUS::ABORTED
	}
}	

