import utils

stm goToPointAndStop {
	
	// Frame
	var frame: Frame
	
 	// Vars do robo.
 	var robot: Robot 
	var robotPosition : Point
	var robotAngle : real
	
	// Vars da posicao target.
	var targetPosition : Point
	var targetAngle : real	
	
	// Constantes de parada dos estados de goToPoint
	// e adjustAngle, respectivamente.
	const STOP_DIST_THRESHOLD: real
	const STOP_ANGLE_THRESHOLD: real
	
	// Vars de transicao
	var distance: real
	var angleDiff: real
	
	// Vars de actions
	var linearVelocity: real
	var angularVelocity: real
	
	//FSM.
	
	// States.
	initial i0
	state sGoToPoint {
		entry robot = getRobot(frame);
		robotPosition = robot.pos;
		robotAngle = robot.angle;
		targetPosition = getTargetPosition (frame);
		targetAngle = getTargetAngle (frame);
		distance = getDistance(robotPosition, targetPosition);
		angleDiff = smallestAngleDiff(robotAngle, targetAngle);
		IMove::move(linearVelocity, angularVelocity) 
		
		exit IMove::stop()
	}
	state sAdjustAngle {
		entry robotPosition = getRobotPosition (frame);
		robotAngle = getRobotAngle (frame);
		targetPosition = getTargetPosition (frame);
		targetAngle = getTargetAngle (frame);
		distance = getDistance(robotPosition, targetPosition);
		angleDiff = smallestAngleDiff(robotAngle, targetAngle);
		IMove::move(linearVelocity, angularVelocity)  
		
		exit IMove::stop()
	}
	final f0
	
	// Transitions.
	transition t0 {
		from i0
		to sGoToPoint
	}
	
	transition t1 {		
		from sGoToPoint
		to sAdjustAngle
		condition distance <= STOP_DIST_THRESHOLD		
	}
	transition t2 {
		from sGoToPoint
		to f0
		condition distance <= STOP_DIST_THRESHOLD /\ angleDiff <= STOP_ANGLE_THRESHOLD
	}
	transition t3 {
		from sAdjustAngle
		to f0
		condition distance <= STOP_DIST_THRESHOLD /\ angleDiff <= STOP_ANGLE_THRESHOLD
	}
	transition t4 {
		from sAdjustAngle
		to sGoToPoint
		condition distance > STOP_DIST_THRESHOLD
	}

}