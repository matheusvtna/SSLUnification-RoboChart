import utils


operation carryBall(frame: Frame, targetPosition: Point, distanceThreshold: real) {
	requires GetRobotFromFrameI
	requires GetBallFromFrameI
	requires GetBallPositionFromFrameI
	requires GetDistanceBetweenTwoPointsI
	requires NodeStatusI	
	
	var robot: Robot
	var ball: Ball
	var ballPosition: Point
	var distance: nat
	
	// States.
	initial Initial
	state GetRobotAndBallPositionFromFrame {
		entry getRobotFromFrame(frame); getBallFromFrame(frame); getBallPositionFromFrame(frame)
		exit robot = getRobotFromFrameResult; ball = getBallFromFrameResult; ballPosition = getBallPositionFromFrameResult		
	}
	state GetDistanceBetweenBallAndTarget {
		entry getDistanceBetweenTwoPoints(ballPosition, targetPosition)
		exit distance = getDistanceBetweenTwoPointsResult
	}
	final Stop
	
	// Transitions.
	transition start {
		from Initial
		to GetRobotAndBallPositionFromFrame
	}
	
	transition calculate {
		from GetRobotAndBallPositionFromFrame
		to GetDistanceBetweenBallAndTarget
	}
	
	transition success {		
		from GetDistanceBetweenBallAndTarget
		to Stop
		condition distance < distanceThreshold
		action nodeStatus = NODE_STATUS::DONE
	}
	
	transition fail {		
		from GetDistanceBetweenBallAndTarget
		to Stop
		condition not allyHasBall(robot, ball)
		action nodeStatus = NODE_STATUS::FAILED
	}
}
