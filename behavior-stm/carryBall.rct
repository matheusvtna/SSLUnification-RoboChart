import utils

// --------------------------------------------
//                 CARRY BALL
// --------------------------------------------
interface CarryBallI {
	carryBall(frame: Frame, targetPosition: Point, distanceThreshold: real)
}

// This operation makes robot move to a target position
// by carrying the ball. It succeeds when the ball is
// at the target position and it fails if the robot
// loses the ball on carry.
//
// @param ball: Ball.
// @param angleThreshold: real.
//
// TODO: Add a FSM output -> makes robot move...
operation carryBall(frame: Frame, targetPosition: Point, distanceThreshold: real) {
	requires GetDistanceBetweenTwoPointsI
	requires AllyHasBallI
	requires NodeStatusI	
	
	var robot: Robot = frame.robot
	var ball: Ball = frame.ball
	var ballPosition: Point = ball.pos
	var distance: nat
	
	// States.
	initial sInitial
	state GetDistanceBetweenBallAndTarget {
		entry GetDistanceBetweenTwoPoints(ballPosition, targetPosition); AllyHasBall(robot, ball)
		exit distance = getDistanceBetweenTwoPointsResult
	}
	final sFinal
	
	// Transitions.
	transition start {
		from sInitial
		to GetDistanceBetweenBallAndTarget
	}
	
	transition success {		
		from GetDistanceBetweenBallAndTarget
		to sFinal
		condition getDistanceBetweenTwoPointsResult < distanceThreshold
		action nodeStatus = NODE_STATUS::DONE
	}
	
	transition fail {		
		from GetDistanceBetweenBallAndTarget
		to sFinal
		condition not allyHasBallResult
		action nodeStatus = NODE_STATUS::FAILED
	}
}
