package behavior
import utils

// --------------------------------------------
//                 CARRY BALL
// --------------------------------------------
interface CarryBallI {
	event startCarryBall
	event stopCarryBall
	event carryBallAction: Action
}

// This state machine makes robot move to a target position
// by carrying the ball. It succeeds when the ball is
// at the target position and it fails if the robot
// loses the ball on carry.
// TODO: Add a FSM output -> makes robot move...
stm CarryBallSTM {	
	// Behavior Tree Control Interfaces.
	requires NodeStatusI
	uses CarryBallI
	
	// Conditional variables.
	var allyHasBall: boolean
	var ballIsPositioned: boolean
	
	// States.
	initial sInitial
	final sFinal
	
	state sWaitStart { }
	state sRun { 
		initial sInitial
		final sFinal
	
	
		state sCarryBall {
			entry nodeStatus = NODE_STATUS::RUNNING
		}
		
		// Transitions.
		transition run {
			from sInitial
			to sCarryBall
		}
		
		transition success {		
			from sCarryBall
			to sFinal
			condition ballIsPositioned
			action nodeStatus = NODE_STATUS::DONE
		}
		
		transition recalculate {
			from sCarryBall
			to sCarryBall
			condition (not ballIsPositioned) /\ allyHasBall
			action nodeStatus = NODE_STATUS::RUNNING
		}
		
		transition fail {		
			from sCarryBall
			to sFinal
			condition not allyHasBall
			action nodeStatus = NODE_STATUS::FAILED
		}
		
	}
	
	transition waitStart {
		from sInitial
		to sWaitStart
	}
	
	transition run {
		from sWaitStart
		to sRun
		trigger startCarryBall
	}
	
	transition success {		
		from sRun
		to sWaitStart
		condition ballIsPositioned
		action nodeStatus = NODE_STATUS::DONE
	}
		
	transition fail {		
			from sRun
			to sWaitStart
			action nodeStatus = NODE_STATUS::FAILED
		}
	
	
	transition abortWaitStart {		
		from sWaitStart
		to sFinal
		trigger stopCarryBall
		action nodeStatus = NODE_STATUS::ABORTED
	}
	
	transition abortRun {
		from sRun
		to sFinal
		trigger stopCarryBall
		action nodeStatus = NODE_STATUS::ABORTED
	}
	
	
	
}
