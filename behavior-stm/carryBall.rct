import utils

// --------------------------------------------
//                 CARRY BALL
// --------------------------------------------
interface CarryBallI {
	event startCarryBall
	event stopCarryBall
}

// This state machine makes robot move to a target position
// by carrying the ball. It succeeds when the ball is
// at the target position and it fails if the robot
// loses the ball on carry.
// TODO: Add a FSM output -> makes robot move...
stm CarryBallSTM {	
	// Behavior Tree Control Interfaces.
	requires NodeStatusI
	uses CarryBallI
	
	// Conditional variables.
	var allyHasBall: boolean
	var ballIsPositioned: boolean
	
	// States.
	initial sInitial
	final sFinal
	
	state sStart { }
	
	state sCarryBall {
		entry nodeStatus = NODE_STATUS::RUNNING
	}
	
	// Transitions.
	transition start {
		from sInitial
		to sStart
	}
	
	transition carryBall {
		from sStart
		to sCarryBall
		trigger startCarryBall
	}
	
	transition success {		
		from sCarryBall
		to sStart
		condition ballIsPositioned
		action nodeStatus = NODE_STATUS::DONE
	}
	
	transition recalculate {
		from sCarryBall
		to sCarryBall
		condition (not ballIsPositioned) /\ allyHasBall
		action nodeStatus = NODE_STATUS::RUNNING
	}
	
	transition fail {		
		from sCarryBall
		to sStart
		condition not allyHasBall
		action nodeStatus = NODE_STATUS::FAILED
	}
	
	transition abortFromCarryBall {		
		from sCarryBall
		to sFinal
		trigger stopCarryBall
		action nodeStatus = NODE_STATUS::ABORTED
	}
	
	
	transition aborFromtStart {		
		from sStart
		to sFinal
		trigger stopCarryBall
		action nodeStatus = NODE_STATUS::ABORTED
	}
	
}
