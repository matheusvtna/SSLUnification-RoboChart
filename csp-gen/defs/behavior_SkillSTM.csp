
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 21-11-2023 23:05:57
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module behavior_SkillSTM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_sInitial|
	              NID_sWaitSkillOrAction|
	              NID_jCheckCurrentSkill|
	              NID_jStopLastSkill|
	              NID_jStartCurrentSkill|
	              NID_jCheckActionForGoToBehindBallSkill|
	              NID_jCheckActionForApproachBallSkill|
	              NID_jCheckActionForCarryBallSkill|
	              NID_jCheckActionForMoveAwaySkill
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_currentSkill, set_currentSkill, setL_currentSkill, setR_currentSkill: behavior_Skill
	channel get_lastSkill, set_lastSkill, setL_lastSkill, setR_lastSkill: behavior_Skill
	channel get_currentAction, set_currentAction, setL_currentAction, setR_currentAction: Action
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel sendAction__: NIDS.InOut.Action
	channel sendAction: InOut.Action
	channel receiveSkill__: NIDS.InOut.behavior_Skill
	channel receiveSkill: InOut.behavior_Skill
	channel startGoToBehindBall__: NIDS.InOut
	channel startGoToBehindBall: InOut
	channel stopGoToBehindBall__: NIDS.InOut
	channel stopGoToBehindBall: InOut
	channel goToBehindBallAction__: NIDS.InOut.Action
	channel goToBehindBallAction: InOut.Action
	channel startApproachBall__: NIDS.InOut
	channel startApproachBall: InOut
	channel stopApproachBall__: NIDS.InOut
	channel stopApproachBall: InOut
	channel approachBallAction__: NIDS.InOut.Action
	channel approachBallAction: InOut.Action
	channel startCarryBall__: NIDS.InOut
	channel startCarryBall: InOut
	channel stopCarryBall__: NIDS.InOut
	channel stopCarryBall: InOut
	channel carryBallAction__: NIDS.InOut.Action
	channel carryBallAction: InOut.Action
	channel startMoveAwayFromPosition__: NIDS.InOut
	channel startMoveAwayFromPosition: InOut
	channel stopMoveAwayFromPosition__: NIDS.InOut
	channel stopMoveAwayFromPosition: InOut
	channel moveAwayAction__: NIDS.InOut.Action
	channel moveAwayAction: InOut.Action
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	sInitial::enter,
	sWaitSkillOrAction::enter,
	jCheckCurrentSkill::enter,
	jStopLastSkill::enter,
	jStartCurrentSkill::enter,
	jCheckActionForGoToBehindBallSkill::enter,
	jCheckActionForApproachBallSkill::enter,
	jCheckActionForCarryBallSkill::enter,
	jCheckActionForMoveAwaySkill::enter
	|}
	
	enteredSS = 	{|
	sWaitSkillOrAction::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	sendAction,
		receiveSkill,
		startGoToBehindBall,
		stopGoToBehindBall,
		goToBehindBallAction,
		startApproachBall,
		stopApproachBall,
		approachBallAction,
		startCarryBall,
		stopCarryBall,
		carryBallAction,
		startMoveAwayFromPosition,
		stopMoveAwayFromPosition,
		moveAwayAction
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: sInitial
	module sInitial
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: sWaitSkillOrAction
	module sWaitSkillOrAction
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jCheckCurrentSkill
	module jCheckCurrentSkill
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jStopLastSkill
	module jStopLastSkill
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jStartCurrentSkill
	module jStartCurrentSkill
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jCheckActionForGoToBehindBallSkill
	module jCheckActionForGoToBehindBallSkill
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jCheckActionForApproachBallSkill
	module jCheckActionForApproachBallSkill
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jCheckActionForCarryBallSkill
	module jCheckActionForCarryBallSkill
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jCheckActionForMoveAwaySkill
	module jCheckActionForMoveAwaySkill
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = share__choice(get_lastSkill?lastSkill -> get_currentSkill?currentSkill -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_sInitial -> SKIP ;  ((SKIP ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim((true)&(receiveSkill__!NID_sWaitSkillOrAction.in?currentSkill:{currentSkill|currentSkill <- behavior_Skill, true} -> share__choice(set_currentSkill!currentSkill -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; jCheckCurrentSkill::enter -> SKIP)))
			 	 [] dbisim(((currentSkill==lastSkill))&(internal__!NID_jCheckCurrentSkill -> SKIP ;  ((SKIP ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentSkill!=lastSkill))&(internal__!NID_jCheckCurrentSkill -> SKIP ;  ((SKIP ; jStopLastSkill::enter -> SKIP))))
			 	 [] dbisim(((lastSkill==behavior_Skill_GO_TO_BEHIND_BALL))&(internal__!NID_jStopLastSkill -> SKIP ;  ((true&(share__choice(stopGoToBehindBall.out -> SKIP)) ; jStartCurrentSkill::enter -> SKIP))))
			 	 [] dbisim(((lastSkill==behavior_Skill_APPROACH_BALL))&(internal__!NID_jStopLastSkill -> SKIP ;  ((true&(share__choice(stopApproachBall.out -> SKIP)) ; jStartCurrentSkill::enter -> SKIP))))
			 	 [] dbisim(((lastSkill==behavior_Skill_CARRY_BALL))&(internal__!NID_jStopLastSkill -> SKIP ;  ((true&(share__choice(stopCarryBall.out -> SKIP)) ; jStartCurrentSkill::enter -> SKIP))))
			 	 [] dbisim(((lastSkill==behavior_Skill_MOVE_AWAY_FROM_POSITION))&(internal__!NID_jStopLastSkill -> SKIP ;  ((true&(share__choice(stopMoveAwayFromPosition.out -> SKIP)) ; jStartCurrentSkill::enter -> SKIP))))
			 	 [] dbisim(((currentSkill==behavior_Skill_GO_TO_BEHIND_BALL))&(internal__!NID_jStartCurrentSkill -> SKIP ;  ((true&(share__choice(startGoToBehindBall.out -> SKIP)) ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentSkill==behavior_Skill_APPROACH_BALL))&(internal__!NID_jStartCurrentSkill -> SKIP ;  ((true&(share__choice(startApproachBall.out -> SKIP)) ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentSkill==behavior_Skill_CARRY_BALL))&(internal__!NID_jStartCurrentSkill -> SKIP ;  ((true&(share__choice(startCarryBall.out -> SKIP)) ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentSkill==behavior_Skill_MOVE_AWAY_FROM_POSITION))&(internal__!NID_jStartCurrentSkill -> SKIP ;  ((true&(share__choice(startMoveAwayFromPosition.out -> SKIP)) ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim((true)&(goToBehindBallAction__!NID_sWaitSkillOrAction.in?currentAction:{currentAction|currentAction <- Action, true} -> share__choice(set_currentAction!currentAction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; jCheckActionForGoToBehindBallSkill::enter -> SKIP)))
			 	 [] dbisim(((currentSkill==behavior_Skill_GO_TO_BEHIND_BALL))&(internal__!NID_jCheckActionForGoToBehindBallSkill -> SKIP ;  ((share__choice(get_currentAction?currentAction -> true&(share__choice(sendAction.out!currentAction -> SKIP))) ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentSkill!=behavior_Skill_GO_TO_BEHIND_BALL))&(internal__!NID_jCheckActionForGoToBehindBallSkill -> SKIP ;  ((SKIP ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim((true)&(approachBallAction__!NID_sWaitSkillOrAction.in?currentAction:{currentAction|currentAction <- Action, true} -> share__choice(set_currentAction!currentAction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; jCheckActionForApproachBallSkill::enter -> SKIP)))
			 	 [] dbisim(((currentSkill==behavior_Skill_APPROACH_BALL))&(internal__!NID_jCheckActionForApproachBallSkill -> SKIP ;  ((share__choice(get_currentAction?currentAction -> true&(share__choice(sendAction.out!currentAction -> SKIP))) ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentSkill!=behavior_Skill_APPROACH_BALL))&(internal__!NID_jCheckActionForApproachBallSkill -> SKIP ;  ((SKIP ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim((true)&(carryBallAction__!NID_sWaitSkillOrAction.in?currentAction:{currentAction|currentAction <- Action, true} -> share__choice(set_currentAction!currentAction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; jCheckActionForCarryBallSkill::enter -> SKIP)))
			 	 [] dbisim(((currentSkill==behavior_Skill_CARRY_BALL))&(internal__!NID_jCheckActionForCarryBallSkill -> SKIP ;  ((share__choice(get_currentAction?currentAction -> true&(share__choice(sendAction.out!currentAction -> SKIP))) ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentSkill!=behavior_Skill_CARRY_BALL))&(internal__!NID_jCheckActionForCarryBallSkill -> SKIP ;  ((SKIP ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim((true)&(moveAwayAction__!NID_sWaitSkillOrAction.in?currentAction:{currentAction|currentAction <- Action, true} -> share__choice(set_currentAction!currentAction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; jCheckActionForMoveAwaySkill::enter -> SKIP)))
			 	 [] dbisim(((currentSkill==behavior_Skill_MOVE_AWAY_FROM_POSITION))&(internal__!NID_jCheckActionForMoveAwaySkill -> SKIP ;  ((share__choice(get_currentAction?currentAction -> true&(share__choice(sendAction.out!currentAction -> SKIP))) ; sWaitSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentSkill!=behavior_Skill_MOVE_AWAY_FROM_POSITION))&(internal__!NID_jCheckActionForMoveAwaySkill -> SKIP ;  ((SKIP ; sWaitSkillOrAction::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				sInitial::enter,
				sWaitSkillOrAction::enter,
				jCheckCurrentSkill::enter,
				jStopLastSkill::enter,
				jStartCurrentSkill::enter,
				jCheckActionForGoToBehindBallSkill::enter,
				jCheckActionForApproachBallSkill::enter,
				jCheckActionForCarryBallSkill::enter,
				jCheckActionForMoveAwaySkill::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_sInitial,receiveSkill__.NID_sWaitSkillOrAction.in,internal__.NID_jCheckCurrentSkill,internal__.NID_jCheckCurrentSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill,goToBehindBallAction__.NID_sWaitSkillOrAction.in,internal__.NID_jCheckActionForGoToBehindBallSkill,internal__.NID_jCheckActionForGoToBehindBallSkill,approachBallAction__.NID_sWaitSkillOrAction.in,internal__.NID_jCheckActionForApproachBallSkill,internal__.NID_jCheckActionForApproachBallSkill,carryBallAction__.NID_sWaitSkillOrAction.in,internal__.NID_jCheckActionForCarryBallSkill,internal__.NID_jCheckActionForCarryBallSkill,moveAwayAction__.NID_sWaitSkillOrAction.in,internal__.NID_jCheckActionForMoveAwaySkill,internal__.NID_jCheckActionForMoveAwaySkill|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   sInitial::D__(id__)
					   [| { share__, terminate } |] (
					   sWaitSkillOrAction::D__(id__)
					   [| { share__, terminate } |] (
					   jCheckCurrentSkill::D__(id__)
					   [| { share__, terminate } |] (
					   jStopLastSkill::D__(id__)
					   [| { share__, terminate } |] (
					   jStartCurrentSkill::D__(id__)
					   [| { share__, terminate } |] (
					   jCheckActionForGoToBehindBallSkill::D__(id__)
					   [| { share__, terminate } |] (
					   jCheckActionForApproachBallSkill::D__(id__)
					   [| { share__, terminate } |] (
					   jCheckActionForCarryBallSkill::D__(id__)
					   [| { share__, terminate } |] (
					   jCheckActionForMoveAwaySkill::D__(id__)
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					 )
					 [[sWaitSkillOrAction::interrupt <- x__ | x__ <- {|interrupt,receiveSkill__.NID_sWaitSkillOrAction.in,goToBehindBallAction__.NID_sWaitSkillOrAction.in,approachBallAction__.NID_sWaitSkillOrAction.in,carryBallAction__.NID_sWaitSkillOrAction.in,moveAwayAction__.NID_sWaitSkillOrAction.in|}]]
					 [[sInitial::interrupt <- x__ | x__ <- {|internal__.NID_sInitial|}]]
					 [[jCheckCurrentSkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckCurrentSkill,internal__.NID_jCheckCurrentSkill|}]]
					 [[jStopLastSkill::interrupt <- x__ | x__ <- {|internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill|}]]
					 [[jStartCurrentSkill::interrupt <- x__ | x__ <- {|internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill|}]]
					 [[jCheckActionForGoToBehindBallSkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckActionForGoToBehindBallSkill,internal__.NID_jCheckActionForGoToBehindBallSkill|}]]
					 [[jCheckActionForApproachBallSkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckActionForApproachBallSkill,internal__.NID_jCheckActionForApproachBallSkill|}]]
					 [[jCheckActionForCarryBallSkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckActionForCarryBallSkill,internal__.NID_jCheckActionForCarryBallSkill|}]]
					 [[jCheckActionForMoveAwaySkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckActionForMoveAwaySkill,internal__.NID_jCheckActionForMoveAwaySkill|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_currentSkill,setR_currentAction |} ]] 
					  [[set_lastSkill <- setL_lastSkill,set_currentSkill <- setL_currentSkill]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_lastSkill
					 			,setL_currentSkill
					 			,setR_currentSkill
					 			 			,setR_currentAction
					 			|}) |]
					 ((sInitial::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_lastSkill,setL_currentSkill |} ]]
					  [[set_currentSkill <- setR_currentSkill,set_currentAction <- setR_currentAction]]
					 )
					)[[setL_lastSkill <- set_lastSkill,setL_currentSkill <- set_currentSkill]]
					 [[setR_currentSkill <- set_currentSkill,setR_currentAction <- set_currentAction]]
					)
				)
				 \ hideSet)
				[[
					sendAction__.x____ <- sendAction,
					receiveSkill__.x____ <- receiveSkill,
					startGoToBehindBall__.x____ <- startGoToBehindBall,
					stopGoToBehindBall__.x____ <- stopGoToBehindBall,
					goToBehindBallAction__.x____ <- goToBehindBallAction,
					startApproachBall__.x____ <- startApproachBall,
					stopApproachBall__.x____ <- stopApproachBall,
					approachBallAction__.x____ <- approachBallAction,
					startCarryBall__.x____ <- startCarryBall,
					stopCarryBall__.x____ <- stopCarryBall,
					carryBallAction__.x____ <- carryBallAction,
					startMoveAwayFromPosition__.x____ <- startMoveAwayFromPosition,
					stopMoveAwayFromPosition__.x____ <- stopMoveAwayFromPosition,
					moveAwayAction__.x____ <- moveAwayAction
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								Behaviour(id__)
								[| {|get_currentAction,set_currentAction,terminate|} |]
								Memory_currentAction((ActionType_HALT,((0,0),0,(0,0)),(true,true,true,0)))
							)\{|get_currentAction,set_currentAction|}
						)
						[| {|get_lastSkill,set_lastSkill,terminate|} |]
						Memory_lastSkill(behavior_Skill_NONE)
					)\{|get_lastSkill,set_lastSkill|}
				)
				[| {|get_currentSkill,set_currentSkill,terminate|} |]
				Memory_currentSkill(behavior_Skill_NONE)
			)\{|get_currentSkill,set_currentSkill|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				sInitial::enter,
				sWaitSkillOrAction::enter,
				jCheckCurrentSkill::enter,
				jStopLastSkill::enter,
				jStartCurrentSkill::enter,
				jCheckActionForGoToBehindBallSkill::enter,
				jCheckActionForApproachBallSkill::enter,
				jCheckActionForCarryBallSkill::enter,
				jCheckActionForMoveAwaySkill::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_sInitial,receiveSkill__.NID_sWaitSkillOrAction.in,internal__.NID_jCheckCurrentSkill,internal__.NID_jCheckCurrentSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill,goToBehindBallAction__.NID_sWaitSkillOrAction.in,internal__.NID_jCheckActionForGoToBehindBallSkill,internal__.NID_jCheckActionForGoToBehindBallSkill,approachBallAction__.NID_sWaitSkillOrAction.in,internal__.NID_jCheckActionForApproachBallSkill,internal__.NID_jCheckActionForApproachBallSkill,carryBallAction__.NID_sWaitSkillOrAction.in,internal__.NID_jCheckActionForCarryBallSkill,internal__.NID_jCheckActionForCarryBallSkill,moveAwayAction__.NID_sWaitSkillOrAction.in,internal__.NID_jCheckActionForMoveAwaySkill,internal__.NID_jCheckActionForMoveAwaySkill|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   sInitial::VS_O__(id__)
					   [| { share__, terminate } |] (
					   sWaitSkillOrAction::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jCheckCurrentSkill::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jStopLastSkill::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jStartCurrentSkill::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jCheckActionForGoToBehindBallSkill::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jCheckActionForApproachBallSkill::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jCheckActionForCarryBallSkill::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jCheckActionForMoveAwaySkill::VS_O__(id__)
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					 )
					 [[sWaitSkillOrAction::interrupt <- x__ | x__ <- {|interrupt,receiveSkill__.NID_sWaitSkillOrAction.in,goToBehindBallAction__.NID_sWaitSkillOrAction.in,approachBallAction__.NID_sWaitSkillOrAction.in,carryBallAction__.NID_sWaitSkillOrAction.in,moveAwayAction__.NID_sWaitSkillOrAction.in|}]]
					 [[sInitial::interrupt <- x__ | x__ <- {|internal__.NID_sInitial|}]]
					 [[jCheckCurrentSkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckCurrentSkill,internal__.NID_jCheckCurrentSkill|}]]
					 [[jStopLastSkill::interrupt <- x__ | x__ <- {|internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill|}]]
					 [[jStartCurrentSkill::interrupt <- x__ | x__ <- {|internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill,internal__.NID_jStartCurrentSkill|}]]
					 [[jCheckActionForGoToBehindBallSkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckActionForGoToBehindBallSkill,internal__.NID_jCheckActionForGoToBehindBallSkill|}]]
					 [[jCheckActionForApproachBallSkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckActionForApproachBallSkill,internal__.NID_jCheckActionForApproachBallSkill|}]]
					 [[jCheckActionForCarryBallSkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckActionForCarryBallSkill,internal__.NID_jCheckActionForCarryBallSkill|}]]
					 [[jCheckActionForMoveAwaySkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckActionForMoveAwaySkill,internal__.NID_jCheckActionForMoveAwaySkill|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_currentSkill,setR_currentAction |} ]] 
					  [[set_lastSkill <- setL_lastSkill,set_currentSkill <- setL_currentSkill]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_lastSkill
					 			,setL_currentSkill
					 			,setR_currentSkill
					 			 			,setR_currentAction
					 			|}) |]
					 ((sInitial::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_lastSkill,setL_currentSkill |} ]]
					  [[set_currentSkill <- setR_currentSkill,set_currentAction <- setR_currentAction]]
					 )
					)[[setL_lastSkill <- set_lastSkill,setL_currentSkill <- set_currentSkill]]
					 [[setR_currentSkill <- set_currentSkill,setR_currentAction <- set_currentAction]]
					)
				)
				 \ hideSet)
				[[
					sendAction__.x____ <- sendAction,
					receiveSkill__.x____ <- receiveSkill,
					startGoToBehindBall__.x____ <- startGoToBehindBall,
					stopGoToBehindBall__.x____ <- stopGoToBehindBall,
					goToBehindBallAction__.x____ <- goToBehindBallAction,
					startApproachBall__.x____ <- startApproachBall,
					stopApproachBall__.x____ <- stopApproachBall,
					approachBallAction__.x____ <- approachBallAction,
					startCarryBall__.x____ <- startCarryBall,
					stopCarryBall__.x____ <- stopCarryBall,
					carryBallAction__.x____ <- carryBallAction,
					startMoveAwayFromPosition__.x____ <- startMoveAwayFromPosition,
					stopMoveAwayFromPosition__.x____ <- stopMoveAwayFromPosition,
					moveAwayAction__.x____ <- moveAwayAction
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								Behaviour_VS_O(id__)
								[| {|get_currentAction,set_currentAction,terminate|} |]
								Memory_currentAction((ActionType_HALT,((0,0),0,(0,0)),(true,true,true,0)))
							)\{|get_currentAction,set_currentAction|}
						)
						[| {|get_lastSkill,set_lastSkill,terminate|} |]
						Memory_lastSkill(behavior_Skill_NONE)
					)\{|get_lastSkill,set_lastSkill|}
				)
				[| {|get_currentSkill,set_currentSkill,terminate|} |]
				Memory_currentSkill(behavior_Skill_NONE)
			)\{|get_currentSkill,set_currentSkill|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_currentSkill(currentSkill) =
		get_currentSkill!currentSkill -> Memory_currentSkill(currentSkill)
		[]
		set_currentSkill?x__ -> Memory_currentSkill(x__)
		[]
		terminate -> SKIP
	Memory_lastSkill(lastSkill) =
		get_lastSkill!lastSkill -> Memory_lastSkill(lastSkill)
		[]
		set_lastSkill?x__ -> Memory_lastSkill(x__)
		[]
		terminate -> SKIP
	Memory_currentAction(currentAction) =
		get_currentAction!currentAction -> Memory_currentAction(currentAction)
		[]
		set_currentAction?x__ -> Memory_currentAction(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__) = Memory_currentSkill(behavior_Skill_NONE)
	[| { terminate } |] (
	Memory_lastSkill(behavior_Skill_NONE)
	[| { terminate } |] (
	Memory_currentAction((ActionType_HALT,((0,0),0,(0,0)),(true,true,true,0)))
	)
	)
	
	getsetLocalChannels = {|get_currentSkill,set_currentSkill,get_lastSkill,set_lastSkill,get_currentAction,set_currentAction|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule
