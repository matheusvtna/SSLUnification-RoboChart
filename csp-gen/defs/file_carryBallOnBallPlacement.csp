
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 22-01-2023 21:54:47
--
-- Iterated compression status: true
-- Assertions compression status: false
--





-- compileSelfContainedOperation
module OP_carryBallOnBallPlacement
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_Initial|
	              NID_GoToBehindBall|
	              NID_ApproachBall|
	              NID_PlaceBall|
	              NID_MoveAwayFromBall|
	              NID_Final
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_robot, set_robot, setL_robot, setR_robot: core_string
	channel get_ball, set_ball, setL_ball, setR_ball: core_string
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	Initial::enter,
	GoToBehindBall::enter,
	ApproachBall::enter,
	PlaceBall::enter,
	MoveAwayFromBall::enter,
	Final::enter
	|}
	
	enteredSS = 	{|
	GoToBehindBall::entered,
	ApproachBall::entered,
	PlaceBall::entered,
	MoveAwayFromBall::entered,
	Final::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
		, share__
		|}
	
	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: Initial
	module Initial
	exports
	
		channel enter, interrupt
		
		D__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = D__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: GoToBehindBall
	module GoToBehindBall
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__goToBehindBall(
						id__,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
						param_targetPosition,
						const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__goToBehindBall(
						id__,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
						param_targetPosition,
						const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: ApproachBall
	module ApproachBall
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(get_ball?ball -> true&CALL__approachBall(
						id__,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
						ball
					)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(get_ball?ball -> true&CALL__approachBall(
						id__,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
						ball
					)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: PlaceBall
	module PlaceBall
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__carryBall(
						id__,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
						param_frame,
						param_targetPosition,
						const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__carryBall(
						id__,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
						param_frame,
						param_targetPosition,
						const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: MoveAwayFromBall
	module MoveAwayFromBall
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__moveAwayFromPosition(
						id__,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
						param_frame,
						param_targetPosition,
						const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__moveAwayFromPosition(
						id__,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
						param_frame,
						param_targetPosition,
						const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: Final
	module Final
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = D__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) \ {terminate}
	
	STM_VS_O(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) \ {terminate}
	
	-- Transitions
	Transitions(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = ((let
		Trans = share__choice(get_robot?robot -> get_ball?ball -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_Initial -> SKIP ;  ((SKIP ; GoToBehindBall::enter -> SKIP))))
			 	 [] dbisim((((allyIsBehind(robot,param_targetPosition,const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) and allyIsCloseToBall(robot,ball))))&(internal__!NID_GoToBehindBall -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ApproachBall::enter -> SKIP)))
			 	 [] dbisim((allyHasBall(robot,ball))&(internal__!NID_ApproachBall -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PlaceBall::enter -> SKIP)))
			 	 [] dbisim(((getDistance(getBallPosition(ball),param_targetPosition)<const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET))&(internal__!NID_PlaceBall -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; MoveAwayFromBall::enter -> SKIP)))
			 	 [] dbisim(((getDistance(getRobotPosition(robot),param_targetPosition)<const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH))&(internal__!NID_MoveAwayFromBall -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Final::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim((
		let
			finalNodesEntered = {|Final::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				Initial::enter,
				GoToBehindBall::enter,
				ApproachBall::enter,
				PlaceBall::enter,
				MoveAwayFromBall::enter,
				Final::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_Initial,internal__.NID_GoToBehindBall,internal__.NID_ApproachBall,internal__.NID_PlaceBall,internal__.NID_MoveAwayFromBall|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   Initial::D__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   [| { share__, terminate } |] (
					   GoToBehindBall::D__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   [| { share__, terminate } |] (
					   ApproachBall::D__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   [| { share__, terminate } |] (
					   PlaceBall::D__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   [| { share__, terminate } |] (
					   MoveAwayFromBall::D__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   [| { share__, terminate } |] (
					   Final::D__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   )
					   )
					   )
					   )
					   )
					 )
					 [[GoToBehindBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GoToBehindBall|}]]
					 [[ApproachBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ApproachBall|}]]
					 [[PlaceBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PlaceBall|}]]
					 [[MoveAwayFromBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_MoveAwayFromBall|}]]
					 [[Final::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[Initial::interrupt <- x__ | x__ <- {|internal__.NID_Initial|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_robot <- setL_robot,set_ball <- setL_ball]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_robot
					 			,setL_ball
					|}) |]
					 ((Initial::enter -> Transitions(id__,
					 			param_frame,
					 			param_targetPosition,
					 		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					 		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					 		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
					  [[ share__ <- x__ | x__ <- {| share__,setL_robot,setL_ball |} ]]
					 )
					)[[setL_robot <- set_robot,setL_ball <- set_ball]]
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim((MachineBody(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)\ enteredSS)
		)
	
	IteratedBehaviour(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim((MachineBody(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)\ enteredSS)
		)
	
	Stateful(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		((
			(Behaviour(id__,
						param_frame,
						param_targetPosition,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
						param_frame,
						param_targetPosition,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						Behaviour(id__,
									param_frame,
									param_targetPosition,
								    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
								    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
								    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						[| {|get_ball,set_ball,terminate|} |]
						Memory_ball(getBall(param_frame))
					)\{|get_ball,set_ball|}
				)
				[| {|get_robot,set_robot,terminate|} |]
				Memory_robot("")
			)\{|get_robot,set_robot|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim((
		let
			finalNodesEntered = {|Final::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				Initial::enter,
				GoToBehindBall::enter,
				ApproachBall::enter,
				PlaceBall::enter,
				MoveAwayFromBall::enter,
				Final::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_Initial,internal__.NID_GoToBehindBall,internal__.NID_ApproachBall,internal__.NID_PlaceBall,internal__.NID_MoveAwayFromBall|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   Initial::VS_O__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   [| { share__, terminate } |] (
					   GoToBehindBall::VS_O__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   [| { share__, terminate } |] (
					   ApproachBall::VS_O__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   [| { share__, terminate } |] (
					   PlaceBall::VS_O__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   [| { share__, terminate } |] (
					   MoveAwayFromBall::VS_O__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   [| { share__, terminate } |] (
					   Final::VS_O__(id__,
					   			param_frame,
					   			param_targetPosition,
					   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
					   )
					   )
					   )
					   )
					   )
					 )
					 [[GoToBehindBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GoToBehindBall|}]]
					 [[ApproachBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ApproachBall|}]]
					 [[PlaceBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PlaceBall|}]]
					 [[MoveAwayFromBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_MoveAwayFromBall|}]]
					 [[Final::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[Initial::interrupt <- x__ | x__ <- {|internal__.NID_Initial|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_robot <- setL_robot,set_ball <- setL_ball]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_robot
					 			,setL_ball
					|}) |]
					 ((Initial::enter -> Transitions(id__,
					 			param_frame,
					 			param_targetPosition,
					 		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					 		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					 		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
					  [[ share__ <- x__ | x__ <- {| share__,setL_robot,setL_ball |} ]]
					 )
					)[[setL_robot <- set_robot,setL_ball <- set_ball]]
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim((MachineBody_VS_O(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		)
	
	IteratedBehaviour_VS_O(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim((MachineBody_VS_O(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		)
	
	Stateful_VS_O(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		dbisim((
			(Behaviour_VS_O(id__,
						param_frame,
						param_targetPosition,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
						param_frame,
						param_targetPosition,
					    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
					    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
					    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						Behaviour_VS_O(id__,
									param_frame,
									param_targetPosition,
								    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
								    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
								    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						[| {|get_ball,set_ball,terminate|} |]
						Memory_ball(getBall(param_frame))
					)\{|get_ball,set_ball|}
				)
				[| {|get_robot,set_robot,terminate|} |]
				Memory_robot("")
			)\{|get_robot,set_robot|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_robot(robot) =
		get_robot!robot -> Memory_robot(robot)
		[]
		set_robot?x__ -> Memory_robot(x__)
		[]
		terminate -> SKIP
	Memory_ball(ball) =
		get_ball!ball -> Memory_ball(ball)
		[]
		set_ball?x__ -> Memory_ball(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = Memory_robot("")
	[| { terminate } |] (
	Memory_ball(getBall(param_frame))
	)
	
	getsetLocalChannels = {|get_robot,set_robot,get_ball,set_ball|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = STM_VS_O(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
	
	D__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = STM(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) \ internal_events
	O__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = sbisim(diamond(D__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)))
	VS__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = FVS__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
	VS_O__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = sbisim(diamond(FVS__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)))
	HEXT__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = O__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) [|shared_variable_events|] SKIP
	HUP__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = O__(id__,
				param_frame,
				param_targetPosition,
			    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) [|{share__}|] SKIP
			endmodule

