
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 23-03-2024 14:58:14
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module behavior_BehaviorSTM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_sInitial|
	              NID_sWaitTacticOrSkillOrAction|
	              NID_jCheckCurrentTactic|
	              NID_jStopLastTactic|
	              NID_jStartCurrentTactic|
	              NID_jCheckSkillForPlaceBallInPositionTactic|
	              NID_jCheckSkillForHaltTactic|
	              NID_jSendAction
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_currentAction, set_currentAction, setL_currentAction, setR_currentAction: Action
	channel get_currentSkill, set_currentSkill, setL_currentSkill, setR_currentSkill: behavior_Skill
	channel get_currentTactic, set_currentTactic, setL_currentTactic, setR_currentTactic: Tactic
	channel get_lastTactic, set_lastTactic, setL_lastTactic, setR_lastTactic: Tactic
	channel get_nodeStatus, set_nodeStatus, setL_nodeStatus, setR_nodeStatus: NODE_STATUS
	channel get_skill, set_skill, setL_skill, setR_skill: behavior_Skill
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel sendSkill__: NIDS.InOut.behavior_Skill
	channel sendSkill: InOut.behavior_Skill
	channel receiveAction__: NIDS.InOut.Action
	channel receiveAction: InOut.Action
	channel receiveFrame__: NIDS.InOut.core_string
	channel receiveFrame: InOut.core_string
	channel receiveField__: NIDS.InOut.core_string
	channel receiveField: InOut.core_string
	channel receiveTactic__: NIDS.InOut.Tactic
	channel receiveTactic: InOut.Tactic
	channel sendAction__: NIDS.InOut.Action
	channel sendAction: InOut.Action
	channel startCarryBallOnBallPlacement__: NIDS.InOut
	channel startCarryBallOnBallPlacement: InOut
	channel stopCarryBallOnBallPlacement__: NIDS.InOut
	channel stopCarryBallOnBallPlacement: InOut
	channel carryBallOnBallPlacementSkill__: NIDS.InOut
	channel carryBallOnBallPlacementSkill: InOut
	channel startHalt__: NIDS.InOut
	channel startHalt: InOut
	channel stopHalt__: NIDS.InOut
	channel stopHalt: InOut
	channel haltSkill__: NIDS.InOut
	channel haltSkill: InOut
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	sInitial::enter,
	sWaitTacticOrSkillOrAction::enter,
	jCheckCurrentTactic::enter,
	jStopLastTactic::enter,
	jStartCurrentTactic::enter,
	jCheckSkillForPlaceBallInPositionTactic::enter,
	jCheckSkillForHaltTactic::enter,
	jSendAction::enter
	|}
	
	enteredSS = 	{|
	sWaitTacticOrSkillOrAction::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	sendSkill,
		receiveAction,
		receiveFrame,
		receiveField,
		receiveTactic,
		sendAction,
		startCarryBallOnBallPlacement,
		stopCarryBallOnBallPlacement,
		carryBallOnBallPlacementSkill,
		startHalt,
		stopHalt,
		haltSkill
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: sInitial
	module sInitial
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: sWaitTacticOrSkillOrAction
	module sWaitTacticOrSkillOrAction
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jCheckCurrentTactic
	module jCheckCurrentTactic
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jStopLastTactic
	module jStopLastTactic
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jStartCurrentTactic
	module jStartCurrentTactic
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jCheckSkillForPlaceBallInPositionTactic
	module jCheckSkillForPlaceBallInPositionTactic
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jCheckSkillForHaltTactic
	module jCheckSkillForHaltTactic
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: jSendAction
	module jSendAction
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = share__choice(get_currentTactic?currentTactic -> get_lastTactic?lastTactic -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_sInitial -> SKIP ;  ((SKIP ; sWaitTacticOrSkillOrAction::enter -> SKIP))))
			 	 [] dbisim((true)&(receiveTactic__!NID_sWaitTacticOrSkillOrAction.in?currentTactic:{currentTactic|currentTactic <- Tactic, true} -> share__choice(set_currentTactic!currentTactic -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; jCheckCurrentTactic::enter -> SKIP)))
			 	 [] dbisim(((currentTactic==lastTactic))&(internal__!NID_jCheckCurrentTactic -> SKIP ;  ((SKIP ; sWaitTacticOrSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentTactic!=lastTactic))&(internal__!NID_jCheckCurrentTactic -> SKIP ;  ((SKIP ; jStopLastTactic::enter -> SKIP))))
			 	 [] dbisim(((lastTactic==Tactic_PLACE_BALL_IN_POSITION))&(internal__!NID_jStopLastTactic -> SKIP ;  ((true&(share__choice(stopCarryBallOnBallPlacement.out -> SKIP)) ; jStartCurrentTactic::enter -> SKIP))))
			 	 [] dbisim(((lastTactic==Tactic_HALT))&(internal__!NID_jStopLastTactic -> SKIP ;  ((true&(share__choice(stopHalt.out -> SKIP)) ; jStartCurrentTactic::enter -> SKIP))))
			 	 [] dbisim(((currentTactic==Tactic_PLACE_BALL_IN_POSITION))&(internal__!NID_jStartCurrentTactic -> SKIP ;  ((true&(share__choice(startCarryBallOnBallPlacement.out -> SKIP)) ; sWaitTacticOrSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentTactic==Tactic_HALT))&(internal__!NID_jStartCurrentTactic -> SKIP ;  ((true&(share__choice(startHalt.out -> SKIP)) ; sWaitTacticOrSkillOrAction::enter -> SKIP))))
			 	 [] dbisim((true)&(carryBallOnBallPlacementSkill__!NID_sWaitTacticOrSkillOrAction.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; jCheckSkillForPlaceBallInPositionTactic::enter -> SKIP)))
			 	 [] dbisim(((currentTactic==Tactic_PLACE_BALL_IN_POSITION))&(internal__!NID_jCheckSkillForPlaceBallInPositionTactic -> SKIP ;  ((share__choice(get_currentSkill?currentSkill -> true&(share__choice(sendSkill.out!currentSkill -> SKIP))) ; sWaitTacticOrSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentTactic!=Tactic_PLACE_BALL_IN_POSITION))&(internal__!NID_jCheckSkillForPlaceBallInPositionTactic -> SKIP ;  ((SKIP ; sWaitTacticOrSkillOrAction::enter -> SKIP))))
			 	 [] dbisim((true)&(haltSkill__!NID_sWaitTacticOrSkillOrAction.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; jCheckSkillForHaltTactic::enter -> SKIP)))
			 	 [] dbisim(((currentTactic==Tactic_HALT))&(internal__!NID_jCheckSkillForHaltTactic -> SKIP ;  ((share__choice(get_currentSkill?currentSkill -> true&(share__choice(sendSkill.out!currentSkill -> SKIP))) ; sWaitTacticOrSkillOrAction::enter -> SKIP))))
			 	 [] dbisim(((currentTactic!=Tactic_HALT))&(internal__!NID_jCheckSkillForHaltTactic -> SKIP ;  ((SKIP ; sWaitTacticOrSkillOrAction::enter -> SKIP))))
			 	 [] dbisim((true)&(receiveAction__!NID_sWaitTacticOrSkillOrAction.in?currentAction:{currentAction|currentAction <- Action, true} -> share__choice(set_currentAction!currentAction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_currentAction?currentAction -> true&(share__choice(sendAction.out!currentAction -> SKIP))) ; jSendAction::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_jSendAction -> SKIP ;  ((SKIP ; sWaitTacticOrSkillOrAction::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				sInitial::enter,
				sWaitTacticOrSkillOrAction::enter,
				jCheckCurrentTactic::enter,
				jStopLastTactic::enter,
				jStartCurrentTactic::enter,
				jCheckSkillForPlaceBallInPositionTactic::enter,
				jCheckSkillForHaltTactic::enter,
				jSendAction::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_sInitial,receiveTactic__.NID_sWaitTacticOrSkillOrAction.in,internal__.NID_jCheckCurrentTactic,internal__.NID_jCheckCurrentTactic,internal__.NID_jStopLastTactic,internal__.NID_jStopLastTactic,internal__.NID_jStartCurrentTactic,internal__.NID_jStartCurrentTactic,carryBallOnBallPlacementSkill__.NID_sWaitTacticOrSkillOrAction.in,internal__.NID_jCheckSkillForPlaceBallInPositionTactic,internal__.NID_jCheckSkillForPlaceBallInPositionTactic,haltSkill__.NID_sWaitTacticOrSkillOrAction.in,internal__.NID_jCheckSkillForHaltTactic,internal__.NID_jCheckSkillForHaltTactic,receiveAction__.NID_sWaitTacticOrSkillOrAction.in,internal__.NID_jSendAction|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   sInitial::D__(id__)
					   [| { share__, terminate } |] (
					   sWaitTacticOrSkillOrAction::D__(id__)
					   [| { share__, terminate } |] (
					   jCheckCurrentTactic::D__(id__)
					   [| { share__, terminate } |] (
					   jStopLastTactic::D__(id__)
					   [| { share__, terminate } |] (
					   jStartCurrentTactic::D__(id__)
					   [| { share__, terminate } |] (
					   jCheckSkillForPlaceBallInPositionTactic::D__(id__)
					   [| { share__, terminate } |] (
					   jCheckSkillForHaltTactic::D__(id__)
					   [| { share__, terminate } |] (
					   jSendAction::D__(id__)
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					 )
					 [[sWaitTacticOrSkillOrAction::interrupt <- x__ | x__ <- {|interrupt,receiveTactic__.NID_sWaitTacticOrSkillOrAction.in,carryBallOnBallPlacementSkill__.NID_sWaitTacticOrSkillOrAction.in,haltSkill__.NID_sWaitTacticOrSkillOrAction.in,receiveAction__.NID_sWaitTacticOrSkillOrAction.in|}]]
					 [[sInitial::interrupt <- x__ | x__ <- {|internal__.NID_sInitial|}]]
					 [[jCheckCurrentTactic::interrupt <- x__ | x__ <- {|internal__.NID_jCheckCurrentTactic,internal__.NID_jCheckCurrentTactic|}]]
					 [[jStopLastTactic::interrupt <- x__ | x__ <- {|internal__.NID_jStopLastTactic,internal__.NID_jStopLastTactic|}]]
					 [[jStartCurrentTactic::interrupt <- x__ | x__ <- {|internal__.NID_jStartCurrentTactic,internal__.NID_jStartCurrentTactic|}]]
					 [[jCheckSkillForPlaceBallInPositionTactic::interrupt <- x__ | x__ <- {|internal__.NID_jCheckSkillForPlaceBallInPositionTactic,internal__.NID_jCheckSkillForPlaceBallInPositionTactic|}]]
					 [[jCheckSkillForHaltTactic::interrupt <- x__ | x__ <- {|internal__.NID_jCheckSkillForHaltTactic,internal__.NID_jCheckSkillForHaltTactic|}]]
					 [[jSendAction::interrupt <- x__ | x__ <- {|internal__.NID_jSendAction|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_currentTactic,setR_currentAction |} ]] 
					  [[set_currentTactic <- setL_currentTactic,set_lastTactic <- setL_lastTactic]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_currentTactic
					 			,setL_lastTactic
					 			,setR_currentTactic
					 			 			,setR_currentAction
					 			|}) |]
					 ((sInitial::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_currentTactic,setL_lastTactic |} ]]
					  [[set_currentTactic <- setR_currentTactic,set_currentAction <- setR_currentAction]]
					 )
					)[[setL_currentTactic <- set_currentTactic,setL_lastTactic <- set_lastTactic]]
					 [[setR_currentTactic <- set_currentTactic,setR_currentAction <- set_currentAction]]
					)
				)
				 \ hideSet)
				[[
					sendSkill__.x____ <- sendSkill,
					receiveAction__.x____ <- receiveAction,
					receiveFrame__.x____ <- receiveFrame,
					receiveField__.x____ <- receiveField,
					receiveTactic__.x____ <- receiveTactic,
					sendAction__.x____ <- sendAction,
					startCarryBallOnBallPlacement__.x____ <- startCarryBallOnBallPlacement,
					stopCarryBallOnBallPlacement__.x____ <- stopCarryBallOnBallPlacement,
					carryBallOnBallPlacementSkill__.x____ <- carryBallOnBallPlacementSkill,
					startHalt__.x____ <- startHalt,
					stopHalt__.x____ <- stopHalt,
					haltSkill__.x____ <- haltSkill
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														Behaviour(id__)
														[| {|get_skill,set_skill,terminate|} |]
														Memory_skill(behavior_Skill_NONE)
													)\{|get_skill,set_skill|}
												)
												[| {|get_nodeStatus,set_nodeStatus,terminate|} |]
												Memory_nodeStatus(NODE_STATUS_RUNNING)
											)\{|get_nodeStatus,set_nodeStatus|}
										)
										[| {|get_lastTactic,set_lastTactic,terminate|} |]
										Memory_lastTactic(Tactic_HALT)
									)\{|get_lastTactic,set_lastTactic|}
								)
								[| {|get_currentTactic,set_currentTactic,terminate|} |]
								Memory_currentTactic(Tactic_HALT)
							)\{|get_currentTactic,set_currentTactic|}
						)
						[| {|get_currentSkill,set_currentSkill,terminate|} |]
						Memory_currentSkill(behavior_Skill_NONE)
					)\{|get_currentSkill,set_currentSkill|}
				)
				[| {|get_currentAction,set_currentAction,terminate|} |]
				Memory_currentAction((ActionType_HALT,((0,0),0,(0,0)),(true,true,true,0)))
			)\{|get_currentAction,set_currentAction|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				sInitial::enter,
				sWaitTacticOrSkillOrAction::enter,
				jCheckCurrentTactic::enter,
				jStopLastTactic::enter,
				jStartCurrentTactic::enter,
				jCheckSkillForPlaceBallInPositionTactic::enter,
				jCheckSkillForHaltTactic::enter,
				jSendAction::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_sInitial,receiveTactic__.NID_sWaitTacticOrSkillOrAction.in,internal__.NID_jCheckCurrentTactic,internal__.NID_jCheckCurrentTactic,internal__.NID_jStopLastTactic,internal__.NID_jStopLastTactic,internal__.NID_jStartCurrentTactic,internal__.NID_jStartCurrentTactic,carryBallOnBallPlacementSkill__.NID_sWaitTacticOrSkillOrAction.in,internal__.NID_jCheckSkillForPlaceBallInPositionTactic,internal__.NID_jCheckSkillForPlaceBallInPositionTactic,haltSkill__.NID_sWaitTacticOrSkillOrAction.in,internal__.NID_jCheckSkillForHaltTactic,internal__.NID_jCheckSkillForHaltTactic,receiveAction__.NID_sWaitTacticOrSkillOrAction.in,internal__.NID_jSendAction|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   sInitial::VS_O__(id__)
					   [| { share__, terminate } |] (
					   sWaitTacticOrSkillOrAction::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jCheckCurrentTactic::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jStopLastTactic::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jStartCurrentTactic::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jCheckSkillForPlaceBallInPositionTactic::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jCheckSkillForHaltTactic::VS_O__(id__)
					   [| { share__, terminate } |] (
					   jSendAction::VS_O__(id__)
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					 )
					 [[sWaitTacticOrSkillOrAction::interrupt <- x__ | x__ <- {|interrupt,receiveTactic__.NID_sWaitTacticOrSkillOrAction.in,carryBallOnBallPlacementSkill__.NID_sWaitTacticOrSkillOrAction.in,haltSkill__.NID_sWaitTacticOrSkillOrAction.in,receiveAction__.NID_sWaitTacticOrSkillOrAction.in|}]]
					 [[sInitial::interrupt <- x__ | x__ <- {|internal__.NID_sInitial|}]]
					 [[jCheckCurrentTactic::interrupt <- x__ | x__ <- {|internal__.NID_jCheckCurrentTactic,internal__.NID_jCheckCurrentTactic|}]]
					 [[jStopLastTactic::interrupt <- x__ | x__ <- {|internal__.NID_jStopLastTactic,internal__.NID_jStopLastTactic|}]]
					 [[jStartCurrentTactic::interrupt <- x__ | x__ <- {|internal__.NID_jStartCurrentTactic,internal__.NID_jStartCurrentTactic|}]]
					 [[jCheckSkillForPlaceBallInPositionTactic::interrupt <- x__ | x__ <- {|internal__.NID_jCheckSkillForPlaceBallInPositionTactic,internal__.NID_jCheckSkillForPlaceBallInPositionTactic|}]]
					 [[jCheckSkillForHaltTactic::interrupt <- x__ | x__ <- {|internal__.NID_jCheckSkillForHaltTactic,internal__.NID_jCheckSkillForHaltTactic|}]]
					 [[jSendAction::interrupt <- x__ | x__ <- {|internal__.NID_jSendAction|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_currentTactic,setR_currentAction |} ]] 
					  [[set_currentTactic <- setL_currentTactic,set_lastTactic <- setL_lastTactic]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_currentTactic
					 			,setL_lastTactic
					 			,setR_currentTactic
					 			 			,setR_currentAction
					 			|}) |]
					 ((sInitial::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_currentTactic,setL_lastTactic |} ]]
					  [[set_currentTactic <- setR_currentTactic,set_currentAction <- setR_currentAction]]
					 )
					)[[setL_currentTactic <- set_currentTactic,setL_lastTactic <- set_lastTactic]]
					 [[setR_currentTactic <- set_currentTactic,setR_currentAction <- set_currentAction]]
					)
				)
				 \ hideSet)
				[[
					sendSkill__.x____ <- sendSkill,
					receiveAction__.x____ <- receiveAction,
					receiveFrame__.x____ <- receiveFrame,
					receiveField__.x____ <- receiveField,
					receiveTactic__.x____ <- receiveTactic,
					sendAction__.x____ <- sendAction,
					startCarryBallOnBallPlacement__.x____ <- startCarryBallOnBallPlacement,
					stopCarryBallOnBallPlacement__.x____ <- stopCarryBallOnBallPlacement,
					carryBallOnBallPlacementSkill__.x____ <- carryBallOnBallPlacementSkill,
					startHalt__.x____ <- startHalt,
					stopHalt__.x____ <- stopHalt,
					haltSkill__.x____ <- haltSkill
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														Behaviour_VS_O(id__)
														[| {|get_skill,set_skill,terminate|} |]
														Memory_skill(behavior_Skill_NONE)
													)\{|get_skill,set_skill|}
												)
												[| {|get_nodeStatus,set_nodeStatus,terminate|} |]
												Memory_nodeStatus(NODE_STATUS_RUNNING)
											)\{|get_nodeStatus,set_nodeStatus|}
										)
										[| {|get_lastTactic,set_lastTactic,terminate|} |]
										Memory_lastTactic(Tactic_HALT)
									)\{|get_lastTactic,set_lastTactic|}
								)
								[| {|get_currentTactic,set_currentTactic,terminate|} |]
								Memory_currentTactic(Tactic_HALT)
							)\{|get_currentTactic,set_currentTactic|}
						)
						[| {|get_currentSkill,set_currentSkill,terminate|} |]
						Memory_currentSkill(behavior_Skill_NONE)
					)\{|get_currentSkill,set_currentSkill|}
				)
				[| {|get_currentAction,set_currentAction,terminate|} |]
				Memory_currentAction((ActionType_HALT,((0,0),0,(0,0)),(true,true,true,0)))
			)\{|get_currentAction,set_currentAction|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_currentAction(currentAction) =
		get_currentAction!currentAction -> Memory_currentAction(currentAction)
		[]
		set_currentAction?x__ -> Memory_currentAction(x__)
		[]
		terminate -> SKIP
	Memory_currentSkill(currentSkill) =
		get_currentSkill!currentSkill -> Memory_currentSkill(currentSkill)
		[]
		set_currentSkill?x__ -> Memory_currentSkill(x__)
		[]
		terminate -> SKIP
	Memory_currentTactic(currentTactic) =
		get_currentTactic!currentTactic -> Memory_currentTactic(currentTactic)
		[]
		set_currentTactic?x__ -> Memory_currentTactic(x__)
		[]
		terminate -> SKIP
	Memory_lastTactic(lastTactic) =
		get_lastTactic!lastTactic -> Memory_lastTactic(lastTactic)
		[]
		set_lastTactic?x__ -> Memory_lastTactic(x__)
		[]
		terminate -> SKIP
	Memory_nodeStatus(nodeStatus) =
		get_nodeStatus!nodeStatus -> Memory_nodeStatus(nodeStatus)
		[]
		set_nodeStatus?x__ -> Memory_nodeStatus(x__)
		[]
		terminate -> SKIP
	Memory_skill(skill) =
		get_skill!skill -> Memory_skill(skill)
		[]
		set_skill?x__ -> Memory_skill(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__) = Memory_currentAction((ActionType_HALT,((0,0),0,(0,0)),(true,true,true,0)))
	[| { terminate } |] (
	Memory_currentSkill(behavior_Skill_NONE)
	[| { terminate } |] (
	Memory_currentTactic(Tactic_HALT)
	[| { terminate } |] (
	Memory_lastTactic(Tactic_HALT)
	[| { terminate } |] (
	Memory_nodeStatus(NODE_STATUS_RUNNING)
	[| { terminate } |] (
	Memory_skill(behavior_Skill_NONE)
	)
	)
	)
	)
	)
	
	getsetLocalChannels = {|get_currentAction,set_currentAction,get_currentSkill,set_currentSkill,get_currentTactic,set_currentTactic,get_lastTactic,set_lastTactic,get_nodeStatus,set_nodeStatus,get_skill,set_skill|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule
