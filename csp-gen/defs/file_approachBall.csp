
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 06-11-2023 21:05:40
--
-- Iterated compression status: true
-- Assertions compression status: false
--




module ApproachBallSTM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_sInitial|
	              NID_sFinal|
	              NID_sStart|
	              NID_sApproach
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_allyIsBehindBall, set_allyIsBehindBall, setL_allyIsBehindBall, setR_allyIsBehindBall: core_boolean
	channel get_allyIsCloseToBall, set_allyIsCloseToBall, setL_allyIsCloseToBall, setR_allyIsCloseToBall: core_boolean
	channel get_allyHasBall, set_allyHasBall, setL_allyHasBall, setR_allyHasBall: core_boolean
	channel get_nodeStatus, set_nodeStatus, setL_nodeStatus, setR_nodeStatus: NODE_STATUS
	
	-- Shared variable channels
	channel set_EXT_nodeStatus: NODE_STATUS
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel startApproachBall__: NIDS.InOut
	channel startApproachBall: InOut
	channel stopApproachBall__: NIDS.InOut
	channel stopApproachBall: InOut
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	sInitial::enter,
	sFinal::enter,
	sStart::enter,
	sApproach::enter
	|}
	
	enteredSS = 	{|
	sFinal::entered,
	sStart::entered,
	sApproach::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_nodeStatus
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	set_EXT_nodeStatus, set_nodeStatus
	,	startApproachBall,
		stopApproachBall
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: sInitial
	module sInitial
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: sFinal
	module sFinal
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: sStart
	module sStart
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: sApproach
	module sApproach
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(true & (share__choice(set_nodeStatus!NODE_STATUS_RUNNING -> SKIP))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(true & (share__choice(set_nodeStatus!NODE_STATUS_RUNNING -> SKIP))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {|set_EXT_nodeStatus|} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {|set_EXT_nodeStatus|} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = share__choice(get_allyIsCloseToBall?allyIsCloseToBall -> get_allyHasBall?allyHasBall -> get_allyIsBehindBall?allyIsBehindBall -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_sInitial -> SKIP ;  ((SKIP ; sStart::enter -> SKIP))))
			 	 [] dbisim((true)&(startApproachBall__!NID_sStart.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; sApproach::enter -> SKIP)))
			 	 [] dbisim((allyHasBall)&(internal__!NID_sApproach -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_nodeStatus!NODE_STATUS_DONE -> SKIP))) ; sStart::enter -> SKIP)))
			 	 [] dbisim(((((not (allyHasBall))) and (not ((((not (allyIsBehindBall)) or (not (allyIsCloseToBall))))))))&(internal__!NID_sApproach -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_nodeStatus!NODE_STATUS_RUNNING -> SKIP))) ; sApproach::enter -> SKIP)))
			 	 [] dbisim(((((not (allyIsBehindBall)) or (not (allyIsCloseToBall)))))&(internal__!NID_sApproach -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_nodeStatus!NODE_STATUS_FAILED -> SKIP))) ; sStart::enter -> SKIP)))
			 	 [] dbisim((true)&(stopApproachBall__!NID_sApproach.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_nodeStatus!NODE_STATUS_ABORTED -> SKIP))) ; sFinal::enter -> SKIP)))
			 	 [] dbisim((true)&(stopApproachBall__!NID_sStart.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_nodeStatus!NODE_STATUS_ABORTED -> SKIP))) ; sFinal::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {|sFinal::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				sInitial::enter,
				sFinal::enter,
				sStart::enter,
				sApproach::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_sInitial,startApproachBall__.NID_sStart.in,internal__.NID_sApproach,internal__.NID_sApproach,internal__.NID_sApproach,stopApproachBall__.NID_sApproach.in,stopApproachBall__.NID_sStart.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   sInitial::D__(id__)
					   [| { share__, terminate } |] (
					   sFinal::D__(id__)
					   [| { share__, terminate } |] (
					   sStart::D__(id__)
					   [| { share__, terminate } |] (
					   sApproach::D__(id__)
					   )
					   )
					   )
					 )
					 [[sFinal::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[sStart::interrupt <- x__ | x__ <- {|interrupt,startApproachBall__.NID_sStart.in,stopApproachBall__.NID_sStart.in|}]]
					 [[sApproach::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_sApproach,internal__.NID_sApproach,internal__.NID_sApproach,stopApproachBall__.NID_sApproach.in|}]]
					 [[sInitial::interrupt <- x__ | x__ <- {|internal__.NID_sInitial|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_allyIsCloseToBall <- setL_allyIsCloseToBall,set_allyHasBall <- setL_allyHasBall,set_allyIsBehindBall <- setL_allyIsBehindBall]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_allyIsCloseToBall
					 			,setL_allyHasBall
					 			,setL_allyIsBehindBall
					|}) |]
					 ((sInitial::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_allyIsCloseToBall,setL_allyHasBall,setL_allyIsBehindBall |} ]]
					 )
					)[[setL_allyIsCloseToBall <- set_allyIsCloseToBall,setL_allyHasBall <- set_allyHasBall,setL_allyIsBehindBall <- set_allyIsBehindBall]]
					)
				)
				 \ hideSet)
				[[
					startApproachBall__.x____ <- startApproachBall,
					stopApproachBall__.x____ <- stopApproachBall
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								Behaviour(id__)
								[| {|get_allyHasBall,set_allyHasBall,terminate|} |]
								Memory_allyHasBall(true)
							)\{|get_allyHasBall,set_allyHasBall|}
						)
						[| {|get_allyIsCloseToBall,set_allyIsCloseToBall,terminate|} |]
						Memory_allyIsCloseToBall(true)
					)\{|get_allyIsCloseToBall,set_allyIsCloseToBall|}
				)
				[| {|get_allyIsBehindBall,set_allyIsBehindBall,terminate|} |]
				Memory_allyIsBehindBall(true)
			)\{|get_allyIsBehindBall,set_allyIsBehindBall|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {|sFinal::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				sInitial::enter,
				sFinal::enter,
				sStart::enter,
				sApproach::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_sInitial,startApproachBall__.NID_sStart.in,internal__.NID_sApproach,internal__.NID_sApproach,internal__.NID_sApproach,stopApproachBall__.NID_sApproach.in,stopApproachBall__.NID_sStart.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   sInitial::VS_O__(id__)
					   [| { share__, terminate } |] (
					   sFinal::VS_O__(id__)
					   [| { share__, terminate } |] (
					   sStart::VS_O__(id__)
					   [| { share__, terminate } |] (
					   sApproach::VS_O__(id__)
					   )
					   )
					   )
					 )
					 [[sFinal::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[sStart::interrupt <- x__ | x__ <- {|interrupt,startApproachBall__.NID_sStart.in,stopApproachBall__.NID_sStart.in|}]]
					 [[sApproach::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_sApproach,internal__.NID_sApproach,internal__.NID_sApproach,stopApproachBall__.NID_sApproach.in|}]]
					 [[sInitial::interrupt <- x__ | x__ <- {|internal__.NID_sInitial|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_allyIsCloseToBall <- setL_allyIsCloseToBall,set_allyHasBall <- setL_allyHasBall,set_allyIsBehindBall <- setL_allyIsBehindBall]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_allyIsCloseToBall
					 			,setL_allyHasBall
					 			,setL_allyIsBehindBall
					|}) |]
					 ((sInitial::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_allyIsCloseToBall,setL_allyHasBall,setL_allyIsBehindBall |} ]]
					 )
					)[[setL_allyIsCloseToBall <- set_allyIsCloseToBall,setL_allyHasBall <- set_allyHasBall,setL_allyIsBehindBall <- set_allyIsBehindBall]]
					)
				)
				 \ hideSet)
				[[
					startApproachBall__.x____ <- startApproachBall,
					stopApproachBall__.x____ <- stopApproachBall
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								Behaviour_VS_O(id__)
								[| {|get_allyHasBall,set_allyHasBall,terminate|} |]
								Memory_allyHasBall(true)
							)\{|get_allyHasBall,set_allyHasBall|}
						)
						[| {|get_allyIsCloseToBall,set_allyIsCloseToBall,terminate|} |]
						Memory_allyIsCloseToBall(true)
					)\{|get_allyIsCloseToBall,set_allyIsCloseToBall|}
				)
				[| {|get_allyIsBehindBall,set_allyIsBehindBall,terminate|} |]
				Memory_allyIsBehindBall(true)
			)\{|get_allyIsBehindBall,set_allyIsBehindBall|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_allyIsBehindBall(allyIsBehindBall) =
		get_allyIsBehindBall!allyIsBehindBall -> Memory_allyIsBehindBall(allyIsBehindBall)
		[]
		set_allyIsBehindBall?x__ -> Memory_allyIsBehindBall(x__)
		[]
		terminate -> SKIP
	Memory_allyIsCloseToBall(allyIsCloseToBall) =
		get_allyIsCloseToBall!allyIsCloseToBall -> Memory_allyIsCloseToBall(allyIsCloseToBall)
		[]
		set_allyIsCloseToBall?x__ -> Memory_allyIsCloseToBall(x__)
		[]
		terminate -> SKIP
	Memory_allyHasBall(allyHasBall) =
		get_allyHasBall!allyHasBall -> Memory_allyHasBall(allyHasBall)
		[]
		set_allyHasBall?x__ -> Memory_allyHasBall(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__) = Memory_allyIsBehindBall(true)
	[| { terminate } |] (
	Memory_allyIsCloseToBall(true)
	[| { terminate } |] (
	Memory_allyHasBall(true)
	)
	)
	
	getsetLocalChannels = {|get_allyIsBehindBall,set_allyIsBehindBall,get_allyIsCloseToBall,set_allyIsCloseToBall,get_allyHasBall,set_allyHasBall|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	Memory_nodeStatus(nodeStatus) =
		get_nodeStatus!nodeStatus -> Memory_nodeStatus(nodeStatus)
		[]
		set_nodeStatus?x__ -> Memory_nodeStatus(x__)
		[]
		set_EXT_nodeStatus?x__ -> Memory_nodeStatus(x__)
		[]
		terminate -> SKIP
	
	-- sharedVarMemory process
	sharedVarMemory(id__) = Memory_nodeStatus(NODE_STATUS_RUNNING)
	
	sharedVarSync = {|get_nodeStatus,set_nodeStatus,set_EXT_nodeStatus|}
	
	sharedVarHide = {|get_nodeStatus|}
endmodule


