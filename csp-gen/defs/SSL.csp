
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 24-11-2022 22:27:53
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module SSL
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel sendRawFrame: InOut.core_string
	channel sendGameEventVision: InOut.core_string
	channel sendGameEventDecision: InOut.core_string
	
	channel moveCall: core_real.core_real
	channel stopCall
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		sendRawFrame,
		sendGameEventVision,
		sendGameEventDecision
	,	moveCall,
		stopCall
	|}
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel receiveGameEvent: InOut.core_string
			channel receiveRawFrame: InOut.core_string
			channel sendFrameDecision: InOut.core_string
			channel sendFieldDecision: InOut.core_string
			channel sendFrameBehavior: InOut.core_string
			channel sendFieldBehavior: InOut.core_string
			channel sendFramePlanning: InOut.core_string
			channel sendFieldPlanning: InOut.core_string
			channel sendFrameNavigation: InOut.core_string
			channel sendFieldNavigation: InOut.core_string
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	receiveGameEvent,
				receiveRawFrame,
				sendFrameDecision,
				sendFieldDecision,
				sendFrameBehavior,
				sendFieldBehavior,
				sendFramePlanning,
				sendFieldPlanning,
				sendFrameNavigation,
				sendFieldNavigation
			|}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i|
				              NID_f
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i::enter,
				f::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(Behaviour(id__))
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(Behaviour_VS_O(id__))
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
		module ctrl_ref1
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel receiveGameEvent: InOut.core_string
			channel receiveFrame: InOut.core_string
			channel receiveField: InOut.core_string
			channel sendTactic: InOut.core_string
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	receiveGameEvent,
				receiveFrame,
				receiveField,
				sendTactic
			|}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_f0|
				              NID_i0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				f0::enter,
				i0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f0::enter,
							i0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f0::D__(id__)
								   [| { share__, terminate } |] (
								   i0::D__(id__)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(Behaviour(id__))
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f0::enter,
							i0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i0::VS_O__(id__)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(Behaviour_VS_O(id__))
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
		module ctrl_ref2
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel receiveFrame: InOut.core_string
			channel receiveField: InOut.core_string
			channel receiveTactic: InOut.core_string
			channel sendAction: InOut.core_string
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	receiveFrame,
				receiveField,
				receiveTactic,
				sendAction
			|}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   f0::D__(id__)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(Behaviour(id__))
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(Behaviour_VS_O(id__))
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
		module ctrl_ref3
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel receiveFrame: InOut.core_string
			channel receiveField: InOut.core_string
			channel receiveAction: InOut.core_string
			channel sendCommand: InOut.core_string
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	receiveFrame,
				receiveField,
				receiveAction,
				sendCommand
			|}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i|
				              NID_f
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i::enter,
				f::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(Behaviour(id__))
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(Behaviour_VS_O(id__))
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
		module ctrl_ref4
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel receiveFrame: InOut.core_string
			channel receiveField: InOut.core_string
			channel receiveCommand: InOut.core_string
			
			
			
			-- declaring call and ret events for undefined operations
			channel stopCall
			channel moveCall: core_real.core_real
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	receiveFrame,
				receiveField,
				receiveCommand
			,	stopCall,
				moveCall
			|}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i|
				              NID_f
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i::enter,
				f::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(Behaviour(id__))
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(Behaviour_VS_O(id__))
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				CALL__stop(id__) 	= stopCall -> SKIP
				CALL__move(id__,
						    param_linearVelocity,
						    param_angularVelocity) 	= moveCall.param_linearVelocity.param_angularVelocity -> SKIP
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
	
	-- declaring module memory
	Memory(id__) = SKIP
	
	D__(id__) = let
		Buffer0(<v>) = 
			ctrl_ref1::sendTactic.out?x -> Buffer0(<x>)
			[]
			ctrl_ref2::receiveTactic.in!v -> Buffer0(<>)
		Buffer0(<>) = ctrl_ref1::sendTactic.out?x -> Buffer0(<x>)
		Buffer1(<v>) = 
			ctrl_ref0::sendFieldBehavior.out?x -> Buffer1(<x>)
			[]
			ctrl_ref2::receiveFrame.in!v -> Buffer1(<>)
		Buffer1(<>) = ctrl_ref0::sendFieldBehavior.out?x -> Buffer1(<x>)
		Buffer2(<v>) = 
			ctrl_ref0::sendFrameBehavior.out?x -> Buffer2(<x>)
			[]
			ctrl_ref2::receiveField.in!v -> Buffer2(<>)
		Buffer2(<>) = ctrl_ref0::sendFrameBehavior.out?x -> Buffer2(<x>)
		Buffer3(<v>) = 
			ctrl_ref2::sendAction.out?x -> Buffer3(<x>)
			[]
			ctrl_ref3::receiveAction.in!v -> Buffer3(<>)
		Buffer3(<>) = ctrl_ref2::sendAction.out?x -> Buffer3(<x>)
		Buffer4(<v>) = 
			ctrl_ref0::sendFieldPlanning.out?x -> Buffer4(<x>)
			[]
			ctrl_ref3::receiveField.in!v -> Buffer4(<>)
		Buffer4(<>) = ctrl_ref0::sendFieldPlanning.out?x -> Buffer4(<x>)
		Buffer5(<v>) = 
			ctrl_ref0::sendFramePlanning.out?x -> Buffer5(<x>)
			[]
			ctrl_ref3::receiveFrame.in!v -> Buffer5(<>)
		Buffer5(<>) = ctrl_ref0::sendFramePlanning.out?x -> Buffer5(<x>)
		Buffer6(<v>) = 
			ctrl_ref3::sendCommand.out?x -> Buffer6(<x>)
			[]
			ctrl_ref4::receiveCommand.in!v -> Buffer6(<>)
		Buffer6(<>) = ctrl_ref3::sendCommand.out?x -> Buffer6(<x>)
		Buffer7(<v>) = 
			ctrl_ref0::sendFrameNavigation.out?x -> Buffer7(<x>)
			[]
			ctrl_ref4::receiveFrame.in!v -> Buffer7(<>)
		Buffer7(<>) = ctrl_ref0::sendFrameNavigation.out?x -> Buffer7(<x>)
		Buffer8(<v>) = 
			ctrl_ref0::sendFieldNavigation.out?x -> Buffer8(<x>)
			[]
			ctrl_ref4::receiveField.in!v -> Buffer8(<>)
		Buffer8(<>) = ctrl_ref0::sendFieldNavigation.out?x -> Buffer8(<x>)
		
	within
		(
			(
				(Buffer0(<>)|||
				Buffer1(<>)|||
				Buffer2(<>)|||
				Buffer3(<>)|||
				Buffer4(<>)|||
				Buffer5(<>)|||
				Buffer6(<>)|||
				Buffer7(<>)|||
				Buffer8(<>)
				)
					[|{|ctrl_ref2::receiveTactic,ctrl_ref1::sendTactic,ctrl_ref2::receiveFrame,ctrl_ref0::sendFieldBehavior,ctrl_ref2::receiveField,ctrl_ref0::sendFrameBehavior,ctrl_ref3::receiveAction,ctrl_ref2::sendAction,ctrl_ref3::receiveField,ctrl_ref0::sendFieldPlanning,ctrl_ref3::receiveFrame,ctrl_ref0::sendFramePlanning,ctrl_ref4::receiveCommand,ctrl_ref3::sendCommand,ctrl_ref4::receiveFrame,ctrl_ref0::sendFrameNavigation,ctrl_ref4::receiveField,ctrl_ref0::sendFieldNavigation|}|]
				(
					(
						(
							ctrl_ref0::D__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::receiveRawFrame <- sendRawFrame,
								ctrl_ref0::receiveGameEvent <- sendGameEventVision
							]]
						)
							[|{|terminate, ctrl_ref0::sendFrameDecision, ctrl_ref0::sendFieldDecision|}|]
						(
							(
								ctrl_ref1::D__(id__)[[
									ctrl_ref1::terminate <- terminate,
									ctrl_ref1::receiveFrame.in <- ctrl_ref0::sendFrameDecision.out,
									ctrl_ref1::receiveFrame.out <- ctrl_ref0::sendFrameDecision.in,
									ctrl_ref1::receiveField.in <- ctrl_ref0::sendFieldDecision.out,
									ctrl_ref1::receiveField.out <- ctrl_ref0::sendFieldDecision.in,
									ctrl_ref1::receiveGameEvent <- sendGameEventDecision
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref2::D__(id__)[[
										ctrl_ref2::terminate <- terminate
									]]
								)
									[|{|terminate|}|]
								(
									(
										ctrl_ref3::D__(id__)[[
											ctrl_ref3::terminate <- terminate
										]]
									)
										[|{|terminate|}|]
									(
										ctrl_ref4::D__(id__)[[
											ctrl_ref4::terminate <- terminate,
											ctrl_ref4::stopCall <- stopCall,
											ctrl_ref4::moveCall <- moveCall
										]]
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\
					diff(
						{|terminate, ctrl_ref0::sendFrameDecision, ctrl_ref0::sendFieldDecision|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
					ctrl_ref2::receiveTactic,
					ctrl_ref1::sendTactic,
					ctrl_ref2::receiveFrame,
					ctrl_ref0::sendFieldBehavior,
					ctrl_ref2::receiveField,
					ctrl_ref0::sendFrameBehavior,
					ctrl_ref3::receiveAction,
					ctrl_ref2::sendAction,
					ctrl_ref3::receiveField,
					ctrl_ref0::sendFieldPlanning,
					ctrl_ref3::receiveFrame,
					ctrl_ref0::sendFramePlanning,
					ctrl_ref4::receiveCommand,
					ctrl_ref3::sendCommand,
					ctrl_ref4::receiveFrame,
					ctrl_ref0::sendFrameNavigation,
					ctrl_ref4::receiveField,
					ctrl_ref0::sendFieldNavigation
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- visible state equivalent
	
	VS__(id__) = let
		Buffer0(<v>) = 
			ctrl_ref1::sendTactic.out?x -> Buffer0(<x>)
			[]
			ctrl_ref2::receiveTactic.in!v -> Buffer0(<>)
		Buffer0(<>) = ctrl_ref1::sendTactic.out?x -> Buffer0(<x>)
		Buffer1(<v>) = 
			ctrl_ref0::sendFieldBehavior.out?x -> Buffer1(<x>)
			[]
			ctrl_ref2::receiveFrame.in!v -> Buffer1(<>)
		Buffer1(<>) = ctrl_ref0::sendFieldBehavior.out?x -> Buffer1(<x>)
		Buffer2(<v>) = 
			ctrl_ref0::sendFrameBehavior.out?x -> Buffer2(<x>)
			[]
			ctrl_ref2::receiveField.in!v -> Buffer2(<>)
		Buffer2(<>) = ctrl_ref0::sendFrameBehavior.out?x -> Buffer2(<x>)
		Buffer3(<v>) = 
			ctrl_ref2::sendAction.out?x -> Buffer3(<x>)
			[]
			ctrl_ref3::receiveAction.in!v -> Buffer3(<>)
		Buffer3(<>) = ctrl_ref2::sendAction.out?x -> Buffer3(<x>)
		Buffer4(<v>) = 
			ctrl_ref0::sendFieldPlanning.out?x -> Buffer4(<x>)
			[]
			ctrl_ref3::receiveField.in!v -> Buffer4(<>)
		Buffer4(<>) = ctrl_ref0::sendFieldPlanning.out?x -> Buffer4(<x>)
		Buffer5(<v>) = 
			ctrl_ref0::sendFramePlanning.out?x -> Buffer5(<x>)
			[]
			ctrl_ref3::receiveFrame.in!v -> Buffer5(<>)
		Buffer5(<>) = ctrl_ref0::sendFramePlanning.out?x -> Buffer5(<x>)
		Buffer6(<v>) = 
			ctrl_ref3::sendCommand.out?x -> Buffer6(<x>)
			[]
			ctrl_ref4::receiveCommand.in!v -> Buffer6(<>)
		Buffer6(<>) = ctrl_ref3::sendCommand.out?x -> Buffer6(<x>)
		Buffer7(<v>) = 
			ctrl_ref0::sendFrameNavigation.out?x -> Buffer7(<x>)
			[]
			ctrl_ref4::receiveFrame.in!v -> Buffer7(<>)
		Buffer7(<>) = ctrl_ref0::sendFrameNavigation.out?x -> Buffer7(<x>)
		Buffer8(<v>) = 
			ctrl_ref0::sendFieldNavigation.out?x -> Buffer8(<x>)
			[]
			ctrl_ref4::receiveField.in!v -> Buffer8(<>)
		Buffer8(<>) = ctrl_ref0::sendFieldNavigation.out?x -> Buffer8(<x>)
		
	within
		(
			(
				(Buffer0(<>)|||
				Buffer1(<>)|||
				Buffer2(<>)|||
				Buffer3(<>)|||
				Buffer4(<>)|||
				Buffer5(<>)|||
				Buffer6(<>)|||
				Buffer7(<>)|||
				Buffer8(<>)
				)
					[|{|ctrl_ref2::receiveTactic,ctrl_ref1::sendTactic,ctrl_ref2::receiveFrame,ctrl_ref0::sendFieldBehavior,ctrl_ref2::receiveField,ctrl_ref0::sendFrameBehavior,ctrl_ref3::receiveAction,ctrl_ref2::sendAction,ctrl_ref3::receiveField,ctrl_ref0::sendFieldPlanning,ctrl_ref3::receiveFrame,ctrl_ref0::sendFramePlanning,ctrl_ref4::receiveCommand,ctrl_ref3::sendCommand,ctrl_ref4::receiveFrame,ctrl_ref0::sendFrameNavigation,ctrl_ref4::receiveField,ctrl_ref0::sendFieldNavigation|}|]
				(
					(
						(
							ctrl_ref0::VS__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::receiveRawFrame <- sendRawFrame,
								ctrl_ref0::receiveGameEvent <- sendGameEventVision
							]]
						)
							[|{|terminate, ctrl_ref0::sendFrameDecision, ctrl_ref0::sendFieldDecision|}|]
						(
							(
								ctrl_ref1::VS__(id__)[[
									ctrl_ref1::terminate <- terminate,
									ctrl_ref1::receiveFrame.in <- ctrl_ref0::sendFrameDecision.out,
									ctrl_ref1::receiveFrame.out <- ctrl_ref0::sendFrameDecision.in,
									ctrl_ref1::receiveField.in <- ctrl_ref0::sendFieldDecision.out,
									ctrl_ref1::receiveField.out <- ctrl_ref0::sendFieldDecision.in,
									ctrl_ref1::receiveGameEvent <- sendGameEventDecision
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref2::VS__(id__)[[
										ctrl_ref2::terminate <- terminate
									]]
								)
									[|{|terminate|}|]
								(
									(
										ctrl_ref3::VS__(id__)[[
											ctrl_ref3::terminate <- terminate
										]]
									)
										[|{|terminate|}|]
									(
										ctrl_ref4::VS__(id__)[[
											ctrl_ref4::terminate <- terminate,
											ctrl_ref4::stopCall <- stopCall,
											ctrl_ref4::moveCall <- moveCall
										]]
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\
					diff(
						{|terminate, ctrl_ref0::sendFrameDecision, ctrl_ref0::sendFieldDecision|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
					ctrl_ref2::receiveTactic,
					ctrl_ref1::sendTactic,
					ctrl_ref2::receiveFrame,
					ctrl_ref0::sendFieldBehavior,
					ctrl_ref2::receiveField,
					ctrl_ref0::sendFrameBehavior,
					ctrl_ref3::receiveAction,
					ctrl_ref2::sendAction,
					ctrl_ref3::receiveField,
					ctrl_ref0::sendFieldPlanning,
					ctrl_ref3::receiveFrame,
					ctrl_ref0::sendFramePlanning,
					ctrl_ref4::receiveCommand,
					ctrl_ref3::sendCommand,
					ctrl_ref4::receiveFrame,
					ctrl_ref0::sendFrameNavigation,
					ctrl_ref4::receiveField,
					ctrl_ref0::sendFieldNavigation
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- O version (optimised)
	
	O__(id__) = sbisim(diamond(let
		Buffer0(<v>) = 
			ctrl_ref1::sendTactic.out?x -> Buffer0(<x>)
			[]
			ctrl_ref2::receiveTactic.in!v -> Buffer0(<>)
		Buffer0(<>) = ctrl_ref1::sendTactic.out?x -> Buffer0(<x>)
		Buffer1(<v>) = 
			ctrl_ref0::sendFieldBehavior.out?x -> Buffer1(<x>)
			[]
			ctrl_ref2::receiveFrame.in!v -> Buffer1(<>)
		Buffer1(<>) = ctrl_ref0::sendFieldBehavior.out?x -> Buffer1(<x>)
		Buffer2(<v>) = 
			ctrl_ref0::sendFrameBehavior.out?x -> Buffer2(<x>)
			[]
			ctrl_ref2::receiveField.in!v -> Buffer2(<>)
		Buffer2(<>) = ctrl_ref0::sendFrameBehavior.out?x -> Buffer2(<x>)
		Buffer3(<v>) = 
			ctrl_ref2::sendAction.out?x -> Buffer3(<x>)
			[]
			ctrl_ref3::receiveAction.in!v -> Buffer3(<>)
		Buffer3(<>) = ctrl_ref2::sendAction.out?x -> Buffer3(<x>)
		Buffer4(<v>) = 
			ctrl_ref0::sendFieldPlanning.out?x -> Buffer4(<x>)
			[]
			ctrl_ref3::receiveField.in!v -> Buffer4(<>)
		Buffer4(<>) = ctrl_ref0::sendFieldPlanning.out?x -> Buffer4(<x>)
		Buffer5(<v>) = 
			ctrl_ref0::sendFramePlanning.out?x -> Buffer5(<x>)
			[]
			ctrl_ref3::receiveFrame.in!v -> Buffer5(<>)
		Buffer5(<>) = ctrl_ref0::sendFramePlanning.out?x -> Buffer5(<x>)
		Buffer6(<v>) = 
			ctrl_ref3::sendCommand.out?x -> Buffer6(<x>)
			[]
			ctrl_ref4::receiveCommand.in!v -> Buffer6(<>)
		Buffer6(<>) = ctrl_ref3::sendCommand.out?x -> Buffer6(<x>)
		Buffer7(<v>) = 
			ctrl_ref0::sendFrameNavigation.out?x -> Buffer7(<x>)
			[]
			ctrl_ref4::receiveFrame.in!v -> Buffer7(<>)
		Buffer7(<>) = ctrl_ref0::sendFrameNavigation.out?x -> Buffer7(<x>)
		Buffer8(<v>) = 
			ctrl_ref0::sendFieldNavigation.out?x -> Buffer8(<x>)
			[]
			ctrl_ref4::receiveField.in!v -> Buffer8(<>)
		Buffer8(<>) = ctrl_ref0::sendFieldNavigation.out?x -> Buffer8(<x>)
		
	within
		(
			(
				(Buffer0(<>)|||
				Buffer1(<>)|||
				Buffer2(<>)|||
				Buffer3(<>)|||
				Buffer4(<>)|||
				Buffer5(<>)|||
				Buffer6(<>)|||
				Buffer7(<>)|||
				Buffer8(<>)
				)
					[|{|ctrl_ref2::receiveTactic,ctrl_ref1::sendTactic,ctrl_ref2::receiveFrame,ctrl_ref0::sendFieldBehavior,ctrl_ref2::receiveField,ctrl_ref0::sendFrameBehavior,ctrl_ref3::receiveAction,ctrl_ref2::sendAction,ctrl_ref3::receiveField,ctrl_ref0::sendFieldPlanning,ctrl_ref3::receiveFrame,ctrl_ref0::sendFramePlanning,ctrl_ref4::receiveCommand,ctrl_ref3::sendCommand,ctrl_ref4::receiveFrame,ctrl_ref0::sendFrameNavigation,ctrl_ref4::receiveField,ctrl_ref0::sendFieldNavigation|}|]
				(
					(
						(
							ctrl_ref0::O__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::receiveRawFrame <- sendRawFrame,
								ctrl_ref0::receiveGameEvent <- sendGameEventVision
							]]
						)
							[|{|terminate, ctrl_ref0::sendFrameDecision, ctrl_ref0::sendFieldDecision|}|]
						(
							(
								ctrl_ref1::O__(id__)[[
									ctrl_ref1::terminate <- terminate,
									ctrl_ref1::receiveFrame.in <- ctrl_ref0::sendFrameDecision.out,
									ctrl_ref1::receiveFrame.out <- ctrl_ref0::sendFrameDecision.in,
									ctrl_ref1::receiveField.in <- ctrl_ref0::sendFieldDecision.out,
									ctrl_ref1::receiveField.out <- ctrl_ref0::sendFieldDecision.in,
									ctrl_ref1::receiveGameEvent <- sendGameEventDecision
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref2::O__(id__)[[
										ctrl_ref2::terminate <- terminate
									]]
								)
									[|{|terminate|}|]
								(
									(
										ctrl_ref3::O__(id__)[[
											ctrl_ref3::terminate <- terminate
										]]
									)
										[|{|terminate|}|]
									(
										ctrl_ref4::O__(id__)[[
											ctrl_ref4::terminate <- terminate,
											ctrl_ref4::stopCall <- stopCall,
											ctrl_ref4::moveCall <- moveCall
										]]
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\
					diff(
						{|terminate, ctrl_ref0::sendFrameDecision, ctrl_ref0::sendFieldDecision|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
					ctrl_ref2::receiveTactic,
					ctrl_ref1::sendTactic,
					ctrl_ref2::receiveFrame,
					ctrl_ref0::sendFieldBehavior,
					ctrl_ref2::receiveField,
					ctrl_ref0::sendFrameBehavior,
					ctrl_ref3::receiveAction,
					ctrl_ref2::sendAction,
					ctrl_ref3::receiveField,
					ctrl_ref0::sendFieldPlanning,
					ctrl_ref3::receiveFrame,
					ctrl_ref0::sendFramePlanning,
					ctrl_ref4::receiveCommand,
					ctrl_ref3::sendCommand,
					ctrl_ref4::receiveFrame,
					ctrl_ref0::sendFrameNavigation,
					ctrl_ref4::receiveField,
					ctrl_ref0::sendFieldNavigation
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- visible state optimised equivalent
	
	VS_O__(id__) = sbisim(diamond(let
		Buffer0(<v>) = 
			ctrl_ref1::sendTactic.out?x -> Buffer0(<x>)
			[]
			ctrl_ref2::receiveTactic.in!v -> Buffer0(<>)
		Buffer0(<>) = ctrl_ref1::sendTactic.out?x -> Buffer0(<x>)
		Buffer1(<v>) = 
			ctrl_ref0::sendFieldBehavior.out?x -> Buffer1(<x>)
			[]
			ctrl_ref2::receiveFrame.in!v -> Buffer1(<>)
		Buffer1(<>) = ctrl_ref0::sendFieldBehavior.out?x -> Buffer1(<x>)
		Buffer2(<v>) = 
			ctrl_ref0::sendFrameBehavior.out?x -> Buffer2(<x>)
			[]
			ctrl_ref2::receiveField.in!v -> Buffer2(<>)
		Buffer2(<>) = ctrl_ref0::sendFrameBehavior.out?x -> Buffer2(<x>)
		Buffer3(<v>) = 
			ctrl_ref2::sendAction.out?x -> Buffer3(<x>)
			[]
			ctrl_ref3::receiveAction.in!v -> Buffer3(<>)
		Buffer3(<>) = ctrl_ref2::sendAction.out?x -> Buffer3(<x>)
		Buffer4(<v>) = 
			ctrl_ref0::sendFieldPlanning.out?x -> Buffer4(<x>)
			[]
			ctrl_ref3::receiveField.in!v -> Buffer4(<>)
		Buffer4(<>) = ctrl_ref0::sendFieldPlanning.out?x -> Buffer4(<x>)
		Buffer5(<v>) = 
			ctrl_ref0::sendFramePlanning.out?x -> Buffer5(<x>)
			[]
			ctrl_ref3::receiveFrame.in!v -> Buffer5(<>)
		Buffer5(<>) = ctrl_ref0::sendFramePlanning.out?x -> Buffer5(<x>)
		Buffer6(<v>) = 
			ctrl_ref3::sendCommand.out?x -> Buffer6(<x>)
			[]
			ctrl_ref4::receiveCommand.in!v -> Buffer6(<>)
		Buffer6(<>) = ctrl_ref3::sendCommand.out?x -> Buffer6(<x>)
		Buffer7(<v>) = 
			ctrl_ref0::sendFrameNavigation.out?x -> Buffer7(<x>)
			[]
			ctrl_ref4::receiveFrame.in!v -> Buffer7(<>)
		Buffer7(<>) = ctrl_ref0::sendFrameNavigation.out?x -> Buffer7(<x>)
		Buffer8(<v>) = 
			ctrl_ref0::sendFieldNavigation.out?x -> Buffer8(<x>)
			[]
			ctrl_ref4::receiveField.in!v -> Buffer8(<>)
		Buffer8(<>) = ctrl_ref0::sendFieldNavigation.out?x -> Buffer8(<x>)
		
	within
		(
			(
				(Buffer0(<>)|||
				Buffer1(<>)|||
				Buffer2(<>)|||
				Buffer3(<>)|||
				Buffer4(<>)|||
				Buffer5(<>)|||
				Buffer6(<>)|||
				Buffer7(<>)|||
				Buffer8(<>)
				)
					[|{|ctrl_ref2::receiveTactic,ctrl_ref1::sendTactic,ctrl_ref2::receiveFrame,ctrl_ref0::sendFieldBehavior,ctrl_ref2::receiveField,ctrl_ref0::sendFrameBehavior,ctrl_ref3::receiveAction,ctrl_ref2::sendAction,ctrl_ref3::receiveField,ctrl_ref0::sendFieldPlanning,ctrl_ref3::receiveFrame,ctrl_ref0::sendFramePlanning,ctrl_ref4::receiveCommand,ctrl_ref3::sendCommand,ctrl_ref4::receiveFrame,ctrl_ref0::sendFrameNavigation,ctrl_ref4::receiveField,ctrl_ref0::sendFieldNavigation|}|]
				(
					(
						(
							ctrl_ref0::VS_O__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::receiveRawFrame <- sendRawFrame,
								ctrl_ref0::receiveGameEvent <- sendGameEventVision
							]]
						)
							[|{|terminate, ctrl_ref0::sendFrameDecision, ctrl_ref0::sendFieldDecision|}|]
						(
							(
								ctrl_ref1::VS_O__(id__)[[
									ctrl_ref1::terminate <- terminate,
									ctrl_ref1::receiveFrame.in <- ctrl_ref0::sendFrameDecision.out,
									ctrl_ref1::receiveFrame.out <- ctrl_ref0::sendFrameDecision.in,
									ctrl_ref1::receiveField.in <- ctrl_ref0::sendFieldDecision.out,
									ctrl_ref1::receiveField.out <- ctrl_ref0::sendFieldDecision.in,
									ctrl_ref1::receiveGameEvent <- sendGameEventDecision
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref2::VS_O__(id__)[[
										ctrl_ref2::terminate <- terminate
									]]
								)
									[|{|terminate|}|]
								(
									(
										ctrl_ref3::VS_O__(id__)[[
											ctrl_ref3::terminate <- terminate
										]]
									)
										[|{|terminate|}|]
									(
										ctrl_ref4::VS_O__(id__)[[
											ctrl_ref4::terminate <- terminate,
											ctrl_ref4::stopCall <- stopCall,
											ctrl_ref4::moveCall <- moveCall
										]]
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\
					diff(
						{|terminate, ctrl_ref0::sendFrameDecision, ctrl_ref0::sendFieldDecision|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
					ctrl_ref2::receiveTactic,
					ctrl_ref1::sendTactic,
					ctrl_ref2::receiveFrame,
					ctrl_ref0::sendFieldBehavior,
					ctrl_ref2::receiveField,
					ctrl_ref0::sendFrameBehavior,
					ctrl_ref3::receiveAction,
					ctrl_ref2::sendAction,
					ctrl_ref3::receiveField,
					ctrl_ref0::sendFieldPlanning,
					ctrl_ref3::receiveFrame,
					ctrl_ref0::sendFramePlanning,
					ctrl_ref4::receiveCommand,
					ctrl_ref3::sendCommand,
					ctrl_ref4::receiveFrame,
					ctrl_ref0::sendFrameNavigation,
					ctrl_ref4::receiveField,
					ctrl_ref0::sendFieldNavigation
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- O version (optimised) with visible assignments
	
	AS_O__(id__) = sbisim(diamond(let
		Buffer0(<v>) = 
			ctrl_ref1::sendTactic.out?x -> Buffer0(<x>)
			[]
			ctrl_ref2::receiveTactic.in!v -> Buffer0(<>)
		Buffer0(<>) = ctrl_ref1::sendTactic.out?x -> Buffer0(<x>)
		Buffer1(<v>) = 
			ctrl_ref0::sendFieldBehavior.out?x -> Buffer1(<x>)
			[]
			ctrl_ref2::receiveFrame.in!v -> Buffer1(<>)
		Buffer1(<>) = ctrl_ref0::sendFieldBehavior.out?x -> Buffer1(<x>)
		Buffer2(<v>) = 
			ctrl_ref0::sendFrameBehavior.out?x -> Buffer2(<x>)
			[]
			ctrl_ref2::receiveField.in!v -> Buffer2(<>)
		Buffer2(<>) = ctrl_ref0::sendFrameBehavior.out?x -> Buffer2(<x>)
		Buffer3(<v>) = 
			ctrl_ref2::sendAction.out?x -> Buffer3(<x>)
			[]
			ctrl_ref3::receiveAction.in!v -> Buffer3(<>)
		Buffer3(<>) = ctrl_ref2::sendAction.out?x -> Buffer3(<x>)
		Buffer4(<v>) = 
			ctrl_ref0::sendFieldPlanning.out?x -> Buffer4(<x>)
			[]
			ctrl_ref3::receiveField.in!v -> Buffer4(<>)
		Buffer4(<>) = ctrl_ref0::sendFieldPlanning.out?x -> Buffer4(<x>)
		Buffer5(<v>) = 
			ctrl_ref0::sendFramePlanning.out?x -> Buffer5(<x>)
			[]
			ctrl_ref3::receiveFrame.in!v -> Buffer5(<>)
		Buffer5(<>) = ctrl_ref0::sendFramePlanning.out?x -> Buffer5(<x>)
		Buffer6(<v>) = 
			ctrl_ref3::sendCommand.out?x -> Buffer6(<x>)
			[]
			ctrl_ref4::receiveCommand.in!v -> Buffer6(<>)
		Buffer6(<>) = ctrl_ref3::sendCommand.out?x -> Buffer6(<x>)
		Buffer7(<v>) = 
			ctrl_ref0::sendFrameNavigation.out?x -> Buffer7(<x>)
			[]
			ctrl_ref4::receiveFrame.in!v -> Buffer7(<>)
		Buffer7(<>) = ctrl_ref0::sendFrameNavigation.out?x -> Buffer7(<x>)
		Buffer8(<v>) = 
			ctrl_ref0::sendFieldNavigation.out?x -> Buffer8(<x>)
			[]
			ctrl_ref4::receiveField.in!v -> Buffer8(<>)
		Buffer8(<>) = ctrl_ref0::sendFieldNavigation.out?x -> Buffer8(<x>)
		
	within
		(
			(
				(Buffer0(<>)|||
				Buffer1(<>)|||
				Buffer2(<>)|||
				Buffer3(<>)|||
				Buffer4(<>)|||
				Buffer5(<>)|||
				Buffer6(<>)|||
				Buffer7(<>)|||
				Buffer8(<>)
				)
					[|{|ctrl_ref2::receiveTactic,ctrl_ref1::sendTactic,ctrl_ref2::receiveFrame,ctrl_ref0::sendFieldBehavior,ctrl_ref2::receiveField,ctrl_ref0::sendFrameBehavior,ctrl_ref3::receiveAction,ctrl_ref2::sendAction,ctrl_ref3::receiveField,ctrl_ref0::sendFieldPlanning,ctrl_ref3::receiveFrame,ctrl_ref0::sendFramePlanning,ctrl_ref4::receiveCommand,ctrl_ref3::sendCommand,ctrl_ref4::receiveFrame,ctrl_ref0::sendFrameNavigation,ctrl_ref4::receiveField,ctrl_ref0::sendFieldNavigation|}|]
				(
					(
						(
							ctrl_ref0::O__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::receiveRawFrame <- sendRawFrame,
								ctrl_ref0::receiveGameEvent <- sendGameEventVision
							]]
						)
							[|{|terminate, ctrl_ref0::sendFrameDecision, ctrl_ref0::sendFieldDecision|}|]
						(
							(
								ctrl_ref1::O__(id__)[[
									ctrl_ref1::terminate <- terminate,
									ctrl_ref1::receiveFrame.in <- ctrl_ref0::sendFrameDecision.out,
									ctrl_ref1::receiveFrame.out <- ctrl_ref0::sendFrameDecision.in,
									ctrl_ref1::receiveField.in <- ctrl_ref0::sendFieldDecision.out,
									ctrl_ref1::receiveField.out <- ctrl_ref0::sendFieldDecision.in,
									ctrl_ref1::receiveGameEvent <- sendGameEventDecision
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref2::O__(id__)[[
										ctrl_ref2::terminate <- terminate
									]]
								)
									[|{|terminate|}|]
								(
									(
										ctrl_ref3::O__(id__)[[
											ctrl_ref3::terminate <- terminate
										]]
									)
										[|{|terminate|}|]
									(
										ctrl_ref4::O__(id__)[[
											ctrl_ref4::terminate <- terminate,
											ctrl_ref4::stopCall <- stopCall,
											ctrl_ref4::moveCall <- moveCall
										]]
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\
					diff(
						{|terminate, ctrl_ref0::sendFrameDecision, ctrl_ref0::sendFieldDecision|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
					ctrl_ref2::receiveTactic,
					ctrl_ref1::sendTactic,
					ctrl_ref2::receiveFrame,
					ctrl_ref0::sendFieldBehavior,
					ctrl_ref2::receiveField,
					ctrl_ref0::sendFrameBehavior,
					ctrl_ref3::receiveAction,
					ctrl_ref2::sendAction,
					ctrl_ref3::receiveField,
					ctrl_ref0::sendFieldPlanning,
					ctrl_ref3::receiveFrame,
					ctrl_ref0::sendFramePlanning,
					ctrl_ref4::receiveCommand,
					ctrl_ref3::sendCommand,
					ctrl_ref4::receiveFrame,
					ctrl_ref0::sendFrameNavigation,
					ctrl_ref4::receiveField,
					ctrl_ref0::sendFieldNavigation
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
endmodule
