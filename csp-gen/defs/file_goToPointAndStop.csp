
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 10-12-2022 12:03:17
--
-- Iterated compression status: true
-- Assertions compression status: false
--




module goToPointAndStop
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_sGoToPoint|
	              NID_sAdjustAngle|
	              NID_f0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_frame, set_frame, setL_frame, setR_frame: core_string
	channel get_robotPosition, set_robotPosition, setL_robotPosition, setR_robotPosition: {(x0__,x1__) | x0__ <- core_real,x1__ <- core_real}
	channel get_robotAngle, set_robotAngle, setL_robotAngle, setR_robotAngle: core_real
	channel get_targetPosition, set_targetPosition, setL_targetPosition, setR_targetPosition: {(x0__,x1__) | x0__ <- core_real,x1__ <- core_real}
	channel get_targetAngle, set_targetAngle, setL_targetAngle, setR_targetAngle: core_real
	channel get_distance, set_distance, setL_distance, setR_distance: core_real
	channel get_angleDiff, set_angleDiff, setL_angleDiff, setR_angleDiff: core_real
	channel get_linearVelocity, set_linearVelocity, setL_linearVelocity, setR_linearVelocity: core_real
	channel get_angularVelocity, set_angularVelocity, setL_angularVelocity, setR_angularVelocity: core_real
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	sGoToPoint::enter,
	sAdjustAngle::enter,
	f0::enter
	|}
	
	enteredSS = 	{|
	sGoToPoint::entered,
	sAdjustAngle::entered,
	f0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = D__(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: sGoToPoint
	module sGoToPoint
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(share__choice(get_frame?frame -> true & (share__choice(set_robotPosition!getRobotPosition(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_robotAngle!getRobotAngle(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_targetPosition!getTargetPosition(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_targetAngle!getTargetAngle(frame) -> SKIP))));share__choice(share__choice(get_robotPosition?robotPosition -> share__choice(get_targetPosition?targetPosition -> true & (share__choice(set_distance!getDistance(robotPosition,targetPosition) -> SKIP)))));share__choice(share__choice(get_robotAngle?robotAngle -> share__choice(get_targetAngle?targetAngle -> true & (share__choice(set_angleDiff!smallestAngleDiff(robotAngle,targetAngle) -> SKIP)))));share__choice(get_linearVelocity?linearVelocity -> share__choice(get_angularVelocity?angularVelocity -> true&CALL__move(
						id__,
					    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					    const_goToPointAndStop_STOP_ANGLE_THRESHOLD,
						linearVelocity,
						angularVelocity
					))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__stop(
					 	  			id__,
					 	  		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					 	  		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD
					 	  		) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(share__choice(get_frame?frame -> true & (share__choice(set_robotPosition!getRobotPosition(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_robotAngle!getRobotAngle(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_targetPosition!getTargetPosition(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_targetAngle!getTargetAngle(frame) -> SKIP))));share__choice(share__choice(get_robotPosition?robotPosition -> share__choice(get_targetPosition?targetPosition -> true & (share__choice(set_distance!getDistance(robotPosition,targetPosition) -> SKIP)))));share__choice(share__choice(get_robotAngle?robotAngle -> share__choice(get_targetAngle?targetAngle -> true & (share__choice(set_angleDiff!smallestAngleDiff(robotAngle,targetAngle) -> SKIP)))));share__choice(get_linearVelocity?linearVelocity -> share__choice(get_angularVelocity?angularVelocity -> true&CALL__move(
						id__,
					    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					    const_goToPointAndStop_STOP_ANGLE_THRESHOLD,
						linearVelocity,
						angularVelocity
					))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__stop(
					 	  			id__,
					 	  		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					 	  		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD
					 	  		) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: sAdjustAngle
	module sAdjustAngle
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(share__choice(get_frame?frame -> true & (share__choice(set_robotPosition!getRobotPosition(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_robotAngle!getRobotAngle(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_targetPosition!getTargetPosition(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_targetAngle!getTargetAngle(frame) -> SKIP))));share__choice(share__choice(get_robotPosition?robotPosition -> share__choice(get_targetPosition?targetPosition -> true & (share__choice(set_distance!getDistance(robotPosition,targetPosition) -> SKIP)))));share__choice(share__choice(get_robotAngle?robotAngle -> share__choice(get_targetAngle?targetAngle -> true & (share__choice(set_angleDiff!smallestAngleDiff(robotAngle,targetAngle) -> SKIP)))));share__choice(get_linearVelocity?linearVelocity -> share__choice(get_angularVelocity?angularVelocity -> true&CALL__move(
						id__,
					    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					    const_goToPointAndStop_STOP_ANGLE_THRESHOLD,
						linearVelocity,
						angularVelocity
					))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__stop(
					 	  			id__,
					 	  		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					 	  		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD
					 	  		) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(share__choice(get_frame?frame -> true & (share__choice(set_robotPosition!getRobotPosition(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_robotAngle!getRobotAngle(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_targetPosition!getTargetPosition(frame) -> SKIP))));share__choice(share__choice(get_frame?frame -> true & (share__choice(set_targetAngle!getTargetAngle(frame) -> SKIP))));share__choice(share__choice(get_robotPosition?robotPosition -> share__choice(get_targetPosition?targetPosition -> true & (share__choice(set_distance!getDistance(robotPosition,targetPosition) -> SKIP)))));share__choice(share__choice(get_robotAngle?robotAngle -> share__choice(get_targetAngle?targetAngle -> true & (share__choice(set_angleDiff!smallestAngleDiff(robotAngle,targetAngle) -> SKIP)))));share__choice(get_linearVelocity?linearVelocity -> share__choice(get_angularVelocity?angularVelocity -> true&CALL__move(
						id__,
					    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					    const_goToPointAndStop_STOP_ANGLE_THRESHOLD,
						linearVelocity,
						angularVelocity
					))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__stop(
					 	  			id__,
					 	  		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					 	  		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD
					 	  		) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: f0
	module f0
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = D__(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__,
						    const_goToPointAndStop_STOP_DIST_THRESHOLD,
						    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD))
	)\sharedVarHide
	
	STM_VS_O(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__,
						    const_goToPointAndStop_STOP_DIST_THRESHOLD,
						    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = ((let
		Trans = share__choice(get_distance?distance -> get_angleDiff?angleDiff -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; sGoToPoint::enter -> SKIP))))
			 	 [] dbisim(((distance<=const_goToPointAndStop_STOP_DIST_THRESHOLD))&(internal__!NID_sGoToPoint -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; sAdjustAngle::enter -> SKIP)))
			 	 [] dbisim((((distance<=const_goToPointAndStop_STOP_DIST_THRESHOLD) and (angleDiff<=const_goToPointAndStop_STOP_ANGLE_THRESHOLD)))&(internal__!NID_sGoToPoint -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
			 	 [] dbisim((((distance<=const_goToPointAndStop_STOP_DIST_THRESHOLD) and (angleDiff<=const_goToPointAndStop_STOP_ANGLE_THRESHOLD)))&(internal__!NID_sAdjustAngle -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
			 	 [] dbisim(((distance>const_goToPointAndStop_STOP_DIST_THRESHOLD))&(internal__!NID_sAdjustAngle -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; sGoToPoint::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				sGoToPoint::enter,
				sAdjustAngle::enter,
				f0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,internal__.NID_sGoToPoint,internal__.NID_sGoToPoint,internal__.NID_sAdjustAngle,internal__.NID_sAdjustAngle|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__,
					   		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					   		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
					   [| { share__, terminate } |] (
					   sGoToPoint::D__(id__,
					   		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					   		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
					   [| { share__, terminate } |] (
					   sAdjustAngle::D__(id__,
					   		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					   		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
					   [| { share__, terminate } |] (
					   f0::D__(id__,
					   		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					   		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
					   )
					   )
					   )
					 )
					 [[sGoToPoint::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_sGoToPoint,internal__.NID_sGoToPoint|}]]
					 [[sAdjustAngle::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_sAdjustAngle,internal__.NID_sAdjustAngle|}]]
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_distance <- setL_distance,set_angleDiff <- setL_angleDiff]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_distance
					 			,setL_angleDiff
					|}) |]
					 ((i0::enter -> Transitions(id__,
					 		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					 		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD))
					  [[ share__ <- x__ | x__ <- {| share__,setL_distance,setL_angleDiff |} ]]
					 )
					)[[setL_distance <- set_distance,setL_angleDiff <- set_angleDiff]]
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim((MachineBody(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)\ enteredSS)
		)
	
	IteratedBehaviour(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim((MachineBody(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)\ enteredSS)
		)
	
	Stateful(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		((
			(Behaviour(id__,
					    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					    const_goToPointAndStop_STOP_ANGLE_THRESHOLD))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																dbisim(
																	sbisim(
																		dbisim(
																			sbisim(
																				Behaviour(id__,
																						    const_goToPointAndStop_STOP_DIST_THRESHOLD,
																						    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
																				[| {|get_angularVelocity,set_angularVelocity,terminate|} |]
																				Memory_angularVelocity(0)
																			)\{|get_angularVelocity,set_angularVelocity|}
																		)
																		[| {|get_linearVelocity,set_linearVelocity,terminate|} |]
																		Memory_linearVelocity(0)
																	)\{|get_linearVelocity,set_linearVelocity|}
																)
																[| {|get_angleDiff,set_angleDiff,terminate|} |]
																Memory_angleDiff(0)
															)\{|get_angleDiff,set_angleDiff|}
														)
														[| {|get_distance,set_distance,terminate|} |]
														Memory_distance(0)
													)\{|get_distance,set_distance|}
												)
												[| {|get_targetAngle,set_targetAngle,terminate|} |]
												Memory_targetAngle(0)
											)\{|get_targetAngle,set_targetAngle|}
										)
										[| {|get_targetPosition,set_targetPosition,terminate|} |]
										Memory_targetPosition((0,0))
									)\{|get_targetPosition,set_targetPosition|}
								)
								[| {|get_robotAngle,set_robotAngle,terminate|} |]
								Memory_robotAngle(0)
							)\{|get_robotAngle,set_robotAngle|}
						)
						[| {|get_robotPosition,set_robotPosition,terminate|} |]
						Memory_robotPosition((0,0))
					)\{|get_robotPosition,set_robotPosition|}
				)
				[| {|get_frame,set_frame,terminate|} |]
				Memory_frame("")
			)\{|get_frame,set_frame|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				sGoToPoint::enter,
				sAdjustAngle::enter,
				f0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,internal__.NID_sGoToPoint,internal__.NID_sGoToPoint,internal__.NID_sAdjustAngle,internal__.NID_sAdjustAngle|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__,
					   		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					   		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
					   [| { share__, terminate } |] (
					   sGoToPoint::VS_O__(id__,
					   		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					   		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
					   [| { share__, terminate } |] (
					   sAdjustAngle::VS_O__(id__,
					   		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					   		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
					   [| { share__, terminate } |] (
					   f0::VS_O__(id__,
					   		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					   		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
					   )
					   )
					   )
					 )
					 [[sGoToPoint::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_sGoToPoint,internal__.NID_sGoToPoint|}]]
					 [[sAdjustAngle::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_sAdjustAngle,internal__.NID_sAdjustAngle|}]]
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_distance <- setL_distance,set_angleDiff <- setL_angleDiff]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_distance
					 			,setL_angleDiff
					|}) |]
					 ((i0::enter -> Transitions(id__,
					 		    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					 		    const_goToPointAndStop_STOP_ANGLE_THRESHOLD))
					  [[ share__ <- x__ | x__ <- {| share__,setL_distance,setL_angleDiff |} ]]
					 )
					)[[setL_distance <- set_distance,setL_angleDiff <- set_angleDiff]]
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim((MachineBody_VS_O(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD))
		)
	
	IteratedBehaviour_VS_O(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim((MachineBody_VS_O(id__,
				    const_goToPointAndStop_STOP_DIST_THRESHOLD,
				    const_goToPointAndStop_STOP_ANGLE_THRESHOLD))
		)
	
	Stateful_VS_O(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = 
		dbisim((
			(Behaviour_VS_O(id__,
					    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_goToPointAndStop_STOP_DIST_THRESHOLD,
					    const_goToPointAndStop_STOP_ANGLE_THRESHOLD))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																dbisim(
																	sbisim(
																		dbisim(
																			sbisim(
																				Behaviour_VS_O(id__,
																						    const_goToPointAndStop_STOP_DIST_THRESHOLD,
																						    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
																				[| {|get_angularVelocity,set_angularVelocity,terminate|} |]
																				Memory_angularVelocity(0)
																			)\{|get_angularVelocity,set_angularVelocity|}
																		)
																		[| {|get_linearVelocity,set_linearVelocity,terminate|} |]
																		Memory_linearVelocity(0)
																	)\{|get_linearVelocity,set_linearVelocity|}
																)
																[| {|get_angleDiff,set_angleDiff,terminate|} |]
																Memory_angleDiff(0)
															)\{|get_angleDiff,set_angleDiff|}
														)
														[| {|get_distance,set_distance,terminate|} |]
														Memory_distance(0)
													)\{|get_distance,set_distance|}
												)
												[| {|get_targetAngle,set_targetAngle,terminate|} |]
												Memory_targetAngle(0)
											)\{|get_targetAngle,set_targetAngle|}
										)
										[| {|get_targetPosition,set_targetPosition,terminate|} |]
										Memory_targetPosition((0,0))
									)\{|get_targetPosition,set_targetPosition|}
								)
								[| {|get_robotAngle,set_robotAngle,terminate|} |]
								Memory_robotAngle(0)
							)\{|get_robotAngle,set_robotAngle|}
						)
						[| {|get_robotPosition,set_robotPosition,terminate|} |]
						Memory_robotPosition((0,0))
					)\{|get_robotPosition,set_robotPosition|}
				)
				[| {|get_frame,set_frame,terminate|} |]
				Memory_frame("")
			)\{|get_frame,set_frame|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_frame(frame) =
		get_frame!frame -> Memory_frame(frame)
		[]
		set_frame?x__ -> Memory_frame(x__)
		[]
		terminate -> SKIP
	Memory_robotPosition(robotPosition) =
		get_robotPosition!robotPosition -> Memory_robotPosition(robotPosition)
		[]
		set_robotPosition?x__ -> Memory_robotPosition(x__)
		[]
		terminate -> SKIP
	Memory_robotAngle(robotAngle) =
		get_robotAngle!robotAngle -> Memory_robotAngle(robotAngle)
		[]
		set_robotAngle?x__ -> Memory_robotAngle(x__)
		[]
		terminate -> SKIP
	Memory_targetPosition(targetPosition) =
		get_targetPosition!targetPosition -> Memory_targetPosition(targetPosition)
		[]
		set_targetPosition?x__ -> Memory_targetPosition(x__)
		[]
		terminate -> SKIP
	Memory_targetAngle(targetAngle) =
		get_targetAngle!targetAngle -> Memory_targetAngle(targetAngle)
		[]
		set_targetAngle?x__ -> Memory_targetAngle(x__)
		[]
		terminate -> SKIP
	Memory_distance(distance) =
		get_distance!distance -> Memory_distance(distance)
		[]
		set_distance?x__ -> Memory_distance(x__)
		[]
		terminate -> SKIP
	Memory_angleDiff(angleDiff) =
		get_angleDiff!angleDiff -> Memory_angleDiff(angleDiff)
		[]
		set_angleDiff?x__ -> Memory_angleDiff(x__)
		[]
		terminate -> SKIP
	Memory_linearVelocity(linearVelocity) =
		get_linearVelocity!linearVelocity -> Memory_linearVelocity(linearVelocity)
		[]
		set_linearVelocity?x__ -> Memory_linearVelocity(x__)
		[]
		terminate -> SKIP
	Memory_angularVelocity(angularVelocity) =
		get_angularVelocity!angularVelocity -> Memory_angularVelocity(angularVelocity)
		[]
		set_angularVelocity?x__ -> Memory_angularVelocity(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = Memory_frame("")
	[| { terminate } |] (
	Memory_robotPosition((0,0))
	[| { terminate } |] (
	Memory_robotAngle(0)
	[| { terminate } |] (
	Memory_targetPosition((0,0))
	[| { terminate } |] (
	Memory_targetAngle(0)
	[| { terminate } |] (
	Memory_distance(0)
	[| { terminate } |] (
	Memory_angleDiff(0)
	[| { terminate } |] (
	Memory_linearVelocity(0)
	[| { terminate } |] (
	Memory_angularVelocity(0)
	)
	)
	)
	)
	)
	)
	)
	)
	
	getsetLocalChannels = {|get_frame,set_frame,get_robotPosition,set_robotPosition,get_robotAngle,set_robotAngle,get_targetPosition,set_targetPosition,get_targetAngle,set_targetAngle,get_distance,set_distance,get_angleDiff,set_angleDiff,get_linearVelocity,set_linearVelocity,get_angularVelocity,set_angularVelocity|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = STM_VS_O(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
	
	D__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = STM(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) \ internal_events
	O__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = sbisim(diamond(D__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)))
	VS__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = FVS__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)
	VS_O__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = sbisim(diamond(FVS__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD)))
	HEXT__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = O__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) [|shared_variable_events|] SKIP
	HUP__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = O__(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__,
			    const_goToPointAndStop_STOP_DIST_THRESHOLD,
			    const_goToPointAndStop_STOP_ANGLE_THRESHOLD) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule


