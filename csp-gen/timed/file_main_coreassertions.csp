
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 24-11-2022 22:27:53
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "file_main.csp"

-- generate goToPointAndStop
P_goToPointAndStop = let
	id__ = 0
	
	
	
within
	goToPointAndStop::O__(
		id__,
		const_goToPointAndStop_STOP_DIST_THRESHOLD,
		const_goToPointAndStop_STOP_ANGLE_THRESHOLD
	)
assert P_goToPointAndStop :[deadlock-free]	
assert P_goToPointAndStop;RUN({r__}) :[deadlock-free]
assert P_goToPointAndStop :[deterministic]
assert P_goToPointAndStop :[divergence-free]
-- timed deadlock free
assert prioritise(P_goToPointAndStop[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_goToPointAndStop
-- generate stm0
P_stm0 = let
	id__ = 0
	
	
	
within
	stm0::O__(
		id__
	)
assert P_stm0 :[deadlock-free]	
assert P_stm0;RUN({r__}) :[deadlock-free]
assert P_stm0 :[deterministic]
assert P_stm0 :[divergence-free]
-- timed deadlock free
assert prioritise(P_stm0[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_stm0



-- generate SSL
P_SSL = let
	id__ = 0
	
	
	
		
	
within
	SSL::O__(id__)
assert P_SSL :[deadlock-free]	
assert P_SSL;RUN({r__}) :[deadlock-free]
assert P_SSL :[deterministic]
assert P_SSL :[divergence-free]

-- generate SSL_ctrl_ref0
P_SSL_ctrl_ref0 = let
	id__ = 0
	
	
	
		
within
	SSL::ctrl_ref0::O__(id__)

assert P_SSL_ctrl_ref0 :[deadlock-free]	
assert P_SSL_ctrl_ref0;RUN({r__}) :[deadlock-free]
assert P_SSL_ctrl_ref0 :[deterministic]
assert P_SSL_ctrl_ref0 :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_ctrl_ref0[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_ctrl_ref0
-- generate SSL_ctrl_ref1
P_SSL_ctrl_ref1 = let
	id__ = 0
	
	
	
		
within
	SSL::ctrl_ref1::O__(id__)

assert P_SSL_ctrl_ref1 :[deadlock-free]	
assert P_SSL_ctrl_ref1;RUN({r__}) :[deadlock-free]
assert P_SSL_ctrl_ref1 :[deterministic]
assert P_SSL_ctrl_ref1 :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_ctrl_ref1[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_ctrl_ref1
-- generate SSL_ctrl_ref2
P_SSL_ctrl_ref2 = let
	id__ = 0
	
	
	
		
within
	SSL::ctrl_ref2::O__(id__)

assert P_SSL_ctrl_ref2 :[deadlock-free]	
assert P_SSL_ctrl_ref2;RUN({r__}) :[deadlock-free]
assert P_SSL_ctrl_ref2 :[deterministic]
assert P_SSL_ctrl_ref2 :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_ctrl_ref2[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_ctrl_ref2
-- generate SSL_ctrl_ref3
P_SSL_ctrl_ref3 = let
	id__ = 0
	
	
	
		
within
	SSL::ctrl_ref3::O__(id__)

assert P_SSL_ctrl_ref3 :[deadlock-free]	
assert P_SSL_ctrl_ref3;RUN({r__}) :[deadlock-free]
assert P_SSL_ctrl_ref3 :[deterministic]
assert P_SSL_ctrl_ref3 :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_ctrl_ref3[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_ctrl_ref3
-- generate SSL_ctrl_ref4
P_SSL_ctrl_ref4 = let
	id__ = 0
	
	
	
		
within
	SSL::ctrl_ref4::O__(id__)

assert P_SSL_ctrl_ref4 :[deadlock-free]	
assert P_SSL_ctrl_ref4;RUN({r__}) :[deadlock-free]
assert P_SSL_ctrl_ref4 :[deterministic]
assert P_SSL_ctrl_ref4 :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_ctrl_ref4[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_ctrl_ref4
-- timed deadlock free
assert prioritise(P_SSL[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL
