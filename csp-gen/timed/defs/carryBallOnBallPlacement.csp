
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 22-01-2023 21:54:47
--
-- Iterated compression status: true
-- Assertions compression status: false
--

-- compileSelfContainedOperation
module OP_carryBallOnBallPlacement
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_Initial|
	              NID_GoToBehindBall|
	              NID_ApproachBall|
	              NID_PlaceBall|
	              NID_MoveAwayFromBall|
	              NID_Final
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_robot, set_robot, setL_robot, setR_robot: core_string
	channel get_ball, set_ball, setL_ball, setR_ball: core_string
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	Initial::enter,
	GoToBehindBall::enter,
	ApproachBall::enter,
	PlaceBall::enter,
	MoveAwayFromBall::enter,
	Final::enter
	|}
	
	enteredSS = 	{|
	GoToBehindBall::entered,
	ApproachBall::entered,
	PlaceBall::entered,
	MoveAwayFromBall::entered,
	Final::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
		, share__
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_MoveAwayFromBall : core_clock_type 
	channel get_CLID_ApproachBall : core_clock_type 
	channel get_CLID_GoToBehindBall : core_clock_type 
	channel get_CLID_Final : core_clock_type 
	channel get_CLID_PlaceBall : core_clock_type 
	--channel increment__
	
	CLID_MoveAwayFromBall_clock_type(id__,
			          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_ApproachBall_clock_type(id__,
			          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_GoToBehindBall_clock_type(id__,
			          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Final_clock_type(id__,
			          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_PlaceBall_clock_type(id__,
			          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
			          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
			          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	
	
		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: Initial
		module Initial
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = D__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: GoToBehindBall
		module GoToBehindBall
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__goToBehindBall(
								id__,
							    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
							    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
							    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
								param_targetPosition,
								const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__goToBehindBall(
								id__,
							    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
							    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
							    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
								param_targetPosition,
								const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: ApproachBall
		module ApproachBall
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_ball?ball -> true&CALL__approachBall(
								id__,
							    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
							    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
							    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
								ball
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_ball?ball -> true&CALL__approachBall(
								id__,
							    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
							    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
							    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
								ball
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: PlaceBall
		module PlaceBall
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__carryBall(
								id__,
							    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
							    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
							    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
								param_frame,
								param_targetPosition,
								const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__carryBall(
								id__,
							    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
							    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
							    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
								param_frame,
								param_targetPosition,
								const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: MoveAwayFromBall
		module MoveAwayFromBall
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__moveAwayFromPosition(
								id__,
							    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
							    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
							    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
								param_frame,
								param_targetPosition,
								const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__moveAwayFromPosition(
								id__,
							    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
							    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
							    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES,
								param_frame,
								param_targetPosition,
								const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: Final
		module Final
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = D__(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) \ {terminate}
		
		STM_VS_O(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) \ {terminate}
		
		-- Transitions
		Transitions(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = ((let
			Trans = share__choice(get_robot?robot -> get_ball?ball -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_Initial -> SKIP ;  ((SKIP ; GoToBehindBall::enter -> SKIP))))
				 [] dbisim((((allyIsBehind(robot,param_targetPosition,const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) and allyIsCloseToBall(robot,ball))))&(internal__!NID_GoToBehindBall -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ApproachBall::enter -> SKIP)))
				 [] dbisim((allyHasBall(robot,ball))&(internal__!NID_ApproachBall -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PlaceBall::enter -> SKIP)))
				 [] dbisim(((getDistance(getBallPosition(ball),param_targetPosition)<const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET))&(internal__!NID_PlaceBall -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; MoveAwayFromBall::enter -> SKIP)))
				 [] dbisim(((getDistance(getRobotPosition(robot),param_targetPosition)<const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH))&(internal__!NID_MoveAwayFromBall -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Final::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			dbisim((
			let
				finalNodesEntered = {|Final::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					Initial::enter,
					GoToBehindBall::enter,
					ApproachBall::enter,
					PlaceBall::enter,
					MoveAwayFromBall::enter,
					Final::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_Initial,internal__.NID_GoToBehindBall,internal__.NID_ApproachBall,internal__.NID_PlaceBall,internal__.NID_MoveAwayFromBall|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   Initial::D__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   [| { share__, terminate } |] (
						   GoToBehindBall::D__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   [| { share__, terminate } |] (
						   ApproachBall::D__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   [| { share__, terminate } |] (
						   PlaceBall::D__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   [| { share__, terminate } |] (
						   MoveAwayFromBall::D__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   [| { share__, terminate } |] (
						   Final::D__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   )
						   )
						   )
						   )
						   )
						 )
						 [[GoToBehindBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GoToBehindBall|}]]
						 [[ApproachBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ApproachBall|}]]
						 [[PlaceBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PlaceBall|}]]
						 [[MoveAwayFromBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_MoveAwayFromBall|}]]
						 [[Final::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[Initial::interrupt <- x__ | x__ <- {|internal__.NID_Initial|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						  [[set_robot <- setL_robot,set_ball <- setL_ball]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_robot
						 			,setL_ball
						|}) |]
						 ((Initial::enter -> Transitions(id__,
						 			param_frame,
						 			param_targetPosition,
						 		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						 		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						 		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
						  [[ share__ <- x__ | x__ <- {| share__,setL_robot,setL_ball |} ]]
						 )
						)[[setL_robot <- set_robot,setL_ball <- set_ball]]
						)
					)
					 \ hideSet)
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				 		          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				 		          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			dbisim((let
				stateClockSync = {|get_CLID_MoveAwayFromBall,MoveAwayFromBall::entered,get_CLID_ApproachBall,ApproachBall::entered,get_CLID_GoToBehindBall,GoToBehindBall::entered,get_CLID_PlaceBall,PlaceBall::entered|}
			 within
				(MachineBody(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)) \ union(stateClockSync,enteredSS)
			)
			)
		
		
		Stateful(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			((let
				getsetLocalChannels = {|get_robot,set_robot,
				get_ball,set_ball|}
				clockSync = {||}
			within
				(Behaviour(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			param_frame,
				 			param_targetPosition,
				 		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				 		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				 		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) [| {terminate} |] Clocks(id__,
				 		          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				 		          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				 		          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			dbisim((
			let
				finalNodesEntered = {|Final::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					Initial::enter,
					GoToBehindBall::enter,
					ApproachBall::enter,
					PlaceBall::enter,
					MoveAwayFromBall::enter,
					Final::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_Initial,internal__.NID_GoToBehindBall,internal__.NID_ApproachBall,internal__.NID_PlaceBall,internal__.NID_MoveAwayFromBall|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   Initial::VS_O__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   [| { share__, terminate } |] (
						   GoToBehindBall::VS_O__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   [| { share__, terminate } |] (
						   ApproachBall::VS_O__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   [| { share__, terminate } |] (
						   PlaceBall::VS_O__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   [| { share__, terminate } |] (
						   MoveAwayFromBall::VS_O__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   [| { share__, terminate } |] (
						   Final::VS_O__(id__,
						   			param_frame,
						   			param_targetPosition,
						   		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						   		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						   		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
						   )
						   )
						   )
						   )
						   )
						 )
						 [[GoToBehindBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GoToBehindBall|}]]
						 [[ApproachBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ApproachBall|}]]
						 [[PlaceBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PlaceBall|}]]
						 [[MoveAwayFromBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_MoveAwayFromBall|}]]
						 [[Final::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[Initial::interrupt <- x__ | x__ <- {|internal__.NID_Initial|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						  [[set_robot <- setL_robot,set_ball <- setL_ball]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_robot
						 			,setL_ball
						|}) |]
						 ((Initial::enter -> Transitions(id__,
						 			param_frame,
						 			param_targetPosition,
						 		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						 		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						 		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
						  [[ share__ <- x__ | x__ <- {| share__,setL_robot,setL_ball |} ]]
						 )
						)[[setL_robot <- set_robot,setL_ball <- set_ball]]
						)
					)
					 \ hideSet)
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				 		          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				 		          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			dbisim((let
				stateClockSync = {|get_CLID_MoveAwayFromBall,MoveAwayFromBall::entered,get_CLID_ApproachBall,ApproachBall::entered,get_CLID_GoToBehindBall,GoToBehindBall::entered,get_CLID_PlaceBall,PlaceBall::entered|}
			 within
				(MachineBody_VS_O(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		
		Stateful_VS_O(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			dbisim((let
				getsetLocalChannels = {|get_robot,set_robot,
				get_ball,set_ball|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
							param_frame,
							param_targetPosition,
						    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			param_frame,
				 			param_targetPosition,
				 		    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				 		    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				 		    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) [| {terminate} |] Clocks(id__,
				 		          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				 		          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				 		          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_robot(robot) =
			get_robot!robot -> Memory_robot(robot)
			[]
			set_robot?x__ -> Memory_robot(x__)
			[]
			terminate -> SKIP
		Memory_ball(ball) =
			get_ball!ball -> Memory_ball(ball)
			[]
			set_ball?x__ -> Memory_ball(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = Memory_robot("")
		[| { terminate } |] (
		Memory_ball(getBall(param_frame))
		)
		
		getsetLocalChannels = {|get_robot,set_robot,get_ball,set_ball|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = STM_VS_O(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) \ localClockResets
		D__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = timed_priority(STM(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) \ union(internal_events,localClockResets))
		O__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = dbisim(D__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		VS__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = FVS__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
		VS_O__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = dbisim(FVS__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		HEXT__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = O__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) [|shared_variable_events|] SKIP
		FVS_C__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = dbisim(timed_priority(STM(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) \ internal_events))
		HUP__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = timed_priority(O__(id__,
					param_frame,
					param_targetPosition,
				    const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				    const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				    const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__,
				          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_MoveAwayFromBall(id__,x__,
				          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			TimeOut_1(
				MoveAwayFromBall::entered -> Clock_CLID_MoveAwayFromBall(id__,0,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
				[]
				get_CLID_MoveAwayFromBall!x__ -> Clock_CLID_MoveAwayFromBall(id__,x__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
				[]
				terminate -> SKIP,Clock_CLID_MoveAwayFromBall(id__,clock_type_plus(x__,1,CLID_MoveAwayFromBall_clock_type(id__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)),
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		Clock_CLID_ApproachBall(id__,x__,
				          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			TimeOut_1(
				ApproachBall::entered -> Clock_CLID_ApproachBall(id__,0,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
				[]
				get_CLID_ApproachBall!x__ -> Clock_CLID_ApproachBall(id__,x__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
				[]
				terminate -> SKIP,Clock_CLID_ApproachBall(id__,clock_type_plus(x__,1,CLID_ApproachBall_clock_type(id__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)),
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		Clock_CLID_GoToBehindBall(id__,x__,
				          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			TimeOut_1(
				GoToBehindBall::entered -> Clock_CLID_GoToBehindBall(id__,0,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
				[]
				get_CLID_GoToBehindBall!x__ -> Clock_CLID_GoToBehindBall(id__,x__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
				[]
				terminate -> SKIP,Clock_CLID_GoToBehindBall(id__,clock_type_plus(x__,1,CLID_GoToBehindBall_clock_type(id__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)),
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		Clock_CLID_PlaceBall(id__,x__,
				          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = 
			TimeOut_1(
				PlaceBall::entered -> Clock_CLID_PlaceBall(id__,0,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
				[]
				get_CLID_PlaceBall!x__ -> Clock_CLID_PlaceBall(id__,x__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)
				[]
				terminate -> SKIP,Clock_CLID_PlaceBall(id__,clock_type_plus(x__,1,CLID_PlaceBall_clock_type(id__,
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES)),
						          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
						          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
						          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		
		StateClocks(id__,
				          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES) = dbisim(Clock_CLID_MoveAwayFromBall(id__,0,
				          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		[| { terminate } |] (
		dbisim(Clock_CLID_ApproachBall(id__,0,
				          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		[| { terminate } |] (
		dbisim(Clock_CLID_GoToBehindBall(id__,0,
				          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		[| { terminate } |] (
		dbisim(Clock_CLID_PlaceBall(id__,0,
				          const_carryBallOnBallPlacement_DIST_THRESHOLD_BALL_TO_TARGET,
				          const_carryBallOnBallPlacement_DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH,
				          const_carryBallOnBallPlacement_MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES))
		)
		)
		)
		
		stateClockSync = {|get_CLID_MoveAwayFromBall,MoveAwayFromBall::entered,get_CLID_ApproachBall,ApproachBall::entered,get_CLID_GoToBehindBall,GoToBehindBall::entered,get_CLID_PlaceBall,PlaceBall::entered|}
		}
			endmodule
