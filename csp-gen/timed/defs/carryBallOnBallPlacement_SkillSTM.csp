
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 08-11-2023 12:25:46
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module carryBallOnBallPlacement_SkillSTM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_sInitial|
	              NID_sWaitSkill|
	              NID_jCheckCurrentSkill|
	              NID_jStopLastSkill|
	              NID_jStartCurrentSkill
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_currentSkill, set_currentSkill, setL_currentSkill, setR_currentSkill: carryBallOnBallPlacement_Skill
	channel get_lastSkill, set_lastSkill, setL_lastSkill, setR_lastSkill: carryBallOnBallPlacement_Skill
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel receiveSkill__: NIDS.InOut.carryBallOnBallPlacement_Skill
	channel receiveSkill: InOut.carryBallOnBallPlacement_Skill
	channel sendAction__: NIDS.InOut.core_string
	channel sendAction: InOut.core_string
	channel startGoToBehindBall__: NIDS.InOut
	channel startGoToBehindBall: InOut
	channel stopGoToBehindBall__: NIDS.InOut
	channel stopGoToBehindBall: InOut
	channel startApproachBall__: NIDS.InOut
	channel startApproachBall: InOut
	channel stopApproachBall__: NIDS.InOut
	channel stopApproachBall: InOut
	channel startCarryBall__: NIDS.InOut
	channel startCarryBall: InOut
	channel stopCarryBall__: NIDS.InOut
	channel stopCarryBall: InOut
	channel startMoveAwayFromPosition__: NIDS.InOut
	channel startMoveAwayFromPosition: InOut
	channel stopMoveAwayFromPosition__: NIDS.InOut
	channel stopMoveAwayFromPosition: InOut
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	sInitial::enter,
	sWaitSkill::enter,
	jCheckCurrentSkill::enter,
	jStopLastSkill::enter,
	jStartCurrentSkill::enter
	|}
	
	enteredSS = 	{|
	sWaitSkill::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	receiveSkill,
		sendAction,
		startGoToBehindBall,
		stopGoToBehindBall,
		startApproachBall,
		stopApproachBall,
		startCarryBall,
		stopCarryBall,
		startMoveAwayFromPosition,
		stopMoveAwayFromPosition
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_sWaitSkill : core_clock_type 
	--channel increment__
	
	CLID_sWaitSkill_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: sInitial
		module sInitial
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: sWaitSkill
		module sWaitSkill
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Junction: jCheckCurrentSkill
		module jCheckCurrentSkill
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Junction: jStopLastSkill
		module jStopLastSkill
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Junction: jStartCurrentSkill
		module jStartCurrentSkill
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		-- Transitions
		Transitions(id__) = ((let
			Trans = share__choice(get_currentSkill?currentSkill -> get_lastSkill?lastSkill -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_sInitial -> SKIP ;  ((SKIP ; sWaitSkill::enter -> SKIP))))
				 [] dbisim((true)&(receiveSkill__!NID_sWaitSkill.in?currentSkill:{currentSkill|currentSkill <- carryBallOnBallPlacement_Skill, true} -> share__choice(set_currentSkill!currentSkill -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; jCheckCurrentSkill::enter -> SKIP)))
				 [] dbisim(((currentSkill==lastSkill))&(internal__!NID_jCheckCurrentSkill -> SKIP ;  ((SKIP ; sWaitSkill::enter -> SKIP))))
				 [] dbisim(((currentSkill!=lastSkill))&(internal__!NID_jCheckCurrentSkill -> SKIP ;  ((SKIP ; jStopLastSkill::enter -> SKIP))))
				 [] dbisim(((lastSkill==carryBallOnBallPlacement_Skill_GO_TO_BEHIND_BALL))&(internal__!NID_jStopLastSkill -> SKIP ;  ((true&(share__choice(stopGoToBehindBall.out -> SKIP)) ; jStartCurrentSkill::enter -> SKIP))))
				 [] dbisim(((lastSkill==carryBallOnBallPlacement_Skill_APPROACH_BALL))&(internal__!NID_jStopLastSkill -> SKIP ;  ((true&(share__choice(stopApproachBall.out -> SKIP)) ; jStartCurrentSkill::enter -> SKIP))))
				 [] dbisim(((lastSkill==carryBallOnBallPlacement_Skill_CARRY_BALL))&(internal__!NID_jStopLastSkill -> SKIP ;  ((true&(share__choice(stopCarryBall.out -> SKIP)) ; jStartCurrentSkill::enter -> SKIP))))
				 [] dbisim(((lastSkill==carryBallOnBallPlacement_Skill_MOVE_AWAY_FROM_POSITION))&(internal__!NID_jStopLastSkill -> SKIP ;  ((true&(share__choice(stopMoveAwayFromPosition.out -> SKIP)) ; jStartCurrentSkill::enter -> SKIP))))
				 [] dbisim(((currentSkill==carryBallOnBallPlacement_Skill_GO_TO_BEHIND_BALL))&(internal__!NID_jStartCurrentSkill -> SKIP ;  ((true&(share__choice(startGoToBehindBall.out -> SKIP)) ; sWaitSkill::enter -> SKIP))))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					sInitial::enter,
					sWaitSkill::enter,
					jCheckCurrentSkill::enter,
					jStopLastSkill::enter,
					jStartCurrentSkill::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_sInitial,receiveSkill__.NID_sWaitSkill.in,internal__.NID_jCheckCurrentSkill,internal__.NID_jCheckCurrentSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStartCurrentSkill|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   sInitial::D__(id__)
						   [| { share__, terminate } |] (
						   sWaitSkill::D__(id__)
						   [| { share__, terminate } |] (
						   jCheckCurrentSkill::D__(id__)
						   [| { share__, terminate } |] (
						   jStopLastSkill::D__(id__)
						   [| { share__, terminate } |] (
						   jStartCurrentSkill::D__(id__)
						   )
						   )
						   )
						   )
						 )
						 [[sWaitSkill::interrupt <- x__ | x__ <- {|interrupt,receiveSkill__.NID_sWaitSkill.in|}]]
						 [[sInitial::interrupt <- x__ | x__ <- {|internal__.NID_sInitial|}]]
						 [[jCheckCurrentSkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckCurrentSkill,internal__.NID_jCheckCurrentSkill|}]]
						 [[jStopLastSkill::interrupt <- x__ | x__ <- {|internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill|}]]
						 [[jStartCurrentSkill::interrupt <- x__ | x__ <- {|internal__.NID_jStartCurrentSkill|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_currentSkill |} ]] 
						  [[set_currentSkill <- setL_currentSkill,set_lastSkill <- setL_lastSkill]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_currentSkill
						 			,setL_lastSkill
						 			,setR_currentSkill
						 			|}) |]
						 ((sInitial::enter -> Transitions(id__))
						  [[ share__ <- x__ | x__ <- {| share__,setL_currentSkill,setL_lastSkill |} ]]
						  [[set_currentSkill <- setR_currentSkill]]
						 )
						)[[setL_currentSkill <- set_currentSkill,setL_lastSkill <- set_lastSkill]]
						 [[setR_currentSkill <- set_currentSkill]]
						)
					)
					 \ hideSet)
					[[
						receiveSkill__.x____ <- receiveSkill,
						sendAction__.x____ <- sendAction,
						startGoToBehindBall__.x____ <- startGoToBehindBall,
						stopGoToBehindBall__.x____ <- stopGoToBehindBall,
						startApproachBall__.x____ <- startApproachBall,
						stopApproachBall__.x____ <- stopApproachBall,
						startCarryBall__.x____ <- startCarryBall,
						stopCarryBall__.x____ <- stopCarryBall,
						startMoveAwayFromPosition__.x____ <- startMoveAwayFromPosition,
						stopMoveAwayFromPosition__.x____ <- stopMoveAwayFromPosition
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_sWaitSkill,sWaitSkill::entered|}
			 within
				(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_sWaitSkill,sWaitSkill::entered|}
			 within
				(dbisim(
					sbisim(
						MachineBody(id__)
						[| {|get_CLID_sWaitSkill,sWaitSkill::entered,terminate|} |]
						dbisim(Clock_CLID_sWaitSkill(id__,0))
					)\{|get_CLID_sWaitSkill|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__) = 
			((let
				getsetLocalChannels = {|get_currentSkill,set_currentSkill,
				get_lastSkill,set_lastSkill|}
				clockSync = {||}
			within
				(Behaviour(id__) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							IteratedBehaviour(id__)
							[| {|get_lastSkill,set_lastSkill,terminate|} |]
							Memory_lastSkill(carryBallOnBallPlacement_Skill_GO_TO_BEHIND_BALL)
						)\{|get_lastSkill,set_lastSkill|}
					)
					[| {|get_currentSkill,set_currentSkill,terminate|} |]
					Memory_currentSkill(carryBallOnBallPlacement_Skill_GO_TO_BEHIND_BALL)
				)\{|get_currentSkill,set_currentSkill|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					sInitial::enter,
					sWaitSkill::enter,
					jCheckCurrentSkill::enter,
					jStopLastSkill::enter,
					jStartCurrentSkill::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_sInitial,receiveSkill__.NID_sWaitSkill.in,internal__.NID_jCheckCurrentSkill,internal__.NID_jCheckCurrentSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStartCurrentSkill|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   sInitial::VS_O__(id__)
						   [| { share__, terminate } |] (
						   sWaitSkill::VS_O__(id__)
						   [| { share__, terminate } |] (
						   jCheckCurrentSkill::VS_O__(id__)
						   [| { share__, terminate } |] (
						   jStopLastSkill::VS_O__(id__)
						   [| { share__, terminate } |] (
						   jStartCurrentSkill::VS_O__(id__)
						   )
						   )
						   )
						   )
						 )
						 [[sWaitSkill::interrupt <- x__ | x__ <- {|interrupt,receiveSkill__.NID_sWaitSkill.in|}]]
						 [[sInitial::interrupt <- x__ | x__ <- {|internal__.NID_sInitial|}]]
						 [[jCheckCurrentSkill::interrupt <- x__ | x__ <- {|internal__.NID_jCheckCurrentSkill,internal__.NID_jCheckCurrentSkill|}]]
						 [[jStopLastSkill::interrupt <- x__ | x__ <- {|internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill,internal__.NID_jStopLastSkill|}]]
						 [[jStartCurrentSkill::interrupt <- x__ | x__ <- {|internal__.NID_jStartCurrentSkill|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_currentSkill |} ]] 
						  [[set_currentSkill <- setL_currentSkill,set_lastSkill <- setL_lastSkill]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_currentSkill
						 			,setL_lastSkill
						 			,setR_currentSkill
						 			|}) |]
						 ((sInitial::enter -> Transitions(id__))
						  [[ share__ <- x__ | x__ <- {| share__,setL_currentSkill,setL_lastSkill |} ]]
						  [[set_currentSkill <- setR_currentSkill]]
						 )
						)[[setL_currentSkill <- set_currentSkill,setL_lastSkill <- set_lastSkill]]
						 [[setR_currentSkill <- set_currentSkill]]
						)
					)
					 \ hideSet)
					[[
						receiveSkill__.x____ <- receiveSkill,
						sendAction__.x____ <- sendAction,
						startGoToBehindBall__.x____ <- startGoToBehindBall,
						stopGoToBehindBall__.x____ <- stopGoToBehindBall,
						startApproachBall__.x____ <- startApproachBall,
						stopApproachBall__.x____ <- stopApproachBall,
						startCarryBall__.x____ <- startCarryBall,
						stopCarryBall__.x____ <- stopCarryBall,
						startMoveAwayFromPosition__.x____ <- startMoveAwayFromPosition,
						stopMoveAwayFromPosition__.x____ <- stopMoveAwayFromPosition
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_sWaitSkill,sWaitSkill::entered|}
			 within
				(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_sWaitSkill,sWaitSkill::entered|}
			 within
				(dbisim(
					sbisim(
						MachineBody_VS_O(id__)
						[| {|get_CLID_sWaitSkill,sWaitSkill::entered,terminate|} |]
						dbisim(Clock_CLID_sWaitSkill(id__,0))
					)\{|get_CLID_sWaitSkill|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__) = 
			dbisim((let
				getsetLocalChannels = {|get_currentSkill,set_currentSkill,
				get_lastSkill,set_lastSkill|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							IteratedBehaviour_VS_O(id__)
							[| {|get_lastSkill,set_lastSkill,terminate|} |]
							Memory_lastSkill(carryBallOnBallPlacement_Skill_GO_TO_BEHIND_BALL)
						)\{|get_lastSkill,set_lastSkill|}
					)
					[| {|get_currentSkill,set_currentSkill,terminate|} |]
					Memory_currentSkill(carryBallOnBallPlacement_Skill_GO_TO_BEHIND_BALL)
				)\{|get_currentSkill,set_currentSkill|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_currentSkill(currentSkill) =
			get_currentSkill!currentSkill -> Memory_currentSkill(currentSkill)
			[]
			set_currentSkill?x__ -> Memory_currentSkill(x__)
			[]
			terminate -> SKIP
		Memory_lastSkill(lastSkill) =
			get_lastSkill!lastSkill -> Memory_lastSkill(lastSkill)
			[]
			set_lastSkill?x__ -> Memory_lastSkill(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__) = Memory_currentSkill(carryBallOnBallPlacement_Skill_GO_TO_BEHIND_BALL)
		[| { terminate } |] (
		Memory_lastSkill(carryBallOnBallPlacement_Skill_GO_TO_BEHIND_BALL)
		)
		
		getsetLocalChannels = {|get_currentSkill,set_currentSkill,get_lastSkill,set_lastSkill|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__) = STM_VS_O(id__) \ localClockResets
		D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
		O__(id__) = dbisim(D__(id__))
		VS__(id__) = FVS__(id__)
		VS_O__(id__) = dbisim(FVS__(id__))
		HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
		FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
		HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_sWaitSkill(id__,x__) = 
			TimeOut_1(
				sWaitSkill::entered -> Clock_CLID_sWaitSkill(id__,0)
				[]
				get_CLID_sWaitSkill!x__ -> Clock_CLID_sWaitSkill(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_sWaitSkill(id__,clock_type_plus(x__,1,CLID_sWaitSkill_clock_type(id__))))
		
		StateClocks(id__) = dbisim(Clock_CLID_sWaitSkill(id__,0))
		
		stateClockSync = {|get_CLID_sWaitSkill,sWaitSkill::entered|}
		
		-- Shared memory
		-- Shared memory variables
		
		-- sharedVarMemory process
		sharedVarMemory(id__) = terminate -> SKIP
		
		sharedVarSync = {||}
		
		sharedVarHide = {||}
		}
endmodule
