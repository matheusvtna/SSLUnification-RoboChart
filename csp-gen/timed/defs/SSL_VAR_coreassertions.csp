
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 18-05-2023 21:26:55
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "core_timed_defs.csp"
include "core_defs.csp"
include "SSL_VAR.csp"
include "file_var_defs.csp"
include "state_timed_defs.csp"
include "robochart_defs.csp"
include "../instantiations.csp"

transparent wbisim
channel r__
-- generate SSL_VAR
P_SSL_VAR = let
	id__ = 0
	
	
	
		
	
within
	SSL_VAR::O__(id__)
assert P_SSL_VAR :[deadlock-free]	
assert P_SSL_VAR;RUN({r__}) :[deadlock-free]
assert P_SSL_VAR :[deterministic]
assert P_SSL_VAR :[divergence-free]

-- generate SSL_VAR_visionServiceControllerRef
P_SSL_VAR_visionServiceControllerRef = let
	id__ = 0
	
	
	
		
within
	SSL_VAR::visionServiceControllerRef::O__(id__)

assert P_SSL_VAR_visionServiceControllerRef :[deadlock-free]	
assert P_SSL_VAR_visionServiceControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_VAR_visionServiceControllerRef :[deterministic]
assert P_SSL_VAR_visionServiceControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_VAR_visionServiceControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_VAR_visionServiceControllerRef
-- generate SSL_VAR_refereeServiceControllerRef
P_SSL_VAR_refereeServiceControllerRef = let
	id__ = 0
	
	
	
		
within
	SSL_VAR::refereeServiceControllerRef::O__(id__)

assert P_SSL_VAR_refereeServiceControllerRef :[deadlock-free]	
assert P_SSL_VAR_refereeServiceControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_VAR_refereeServiceControllerRef :[deterministic]
assert P_SSL_VAR_refereeServiceControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_VAR_refereeServiceControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_VAR_refereeServiceControllerRef
-- generate SSL_VAR_messageHandlerControllerRef
P_SSL_VAR_messageHandlerControllerRef = let
	id__ = 0
	
	
	
		
within
	SSL_VAR::messageHandlerControllerRef::O__(id__)

assert P_SSL_VAR_messageHandlerControllerRef :[deadlock-free]	
assert P_SSL_VAR_messageHandlerControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_VAR_messageHandlerControllerRef :[deterministic]
assert P_SSL_VAR_messageHandlerControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_VAR_messageHandlerControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_VAR_messageHandlerControllerRef
-- generate SSL_VAR_apiFetcherServiceControllerRef
P_SSL_VAR_apiFetcherServiceControllerRef = let
	id__ = 0
	
	
	
		
within
	SSL_VAR::apiFetcherServiceControllerRef::O__(id__)

assert P_SSL_VAR_apiFetcherServiceControllerRef :[deadlock-free]	
assert P_SSL_VAR_apiFetcherServiceControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_VAR_apiFetcherServiceControllerRef :[deterministic]
assert P_SSL_VAR_apiFetcherServiceControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_VAR_apiFetcherServiceControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_VAR_apiFetcherServiceControllerRef
-- generate SSL_VAR_streamDatabaseControllerRef
P_SSL_VAR_streamDatabaseControllerRef = let
	id__ = 0
	
	
	
		
within
	SSL_VAR::streamDatabaseControllerRef::O__(id__)

assert P_SSL_VAR_streamDatabaseControllerRef :[deadlock-free]	
assert P_SSL_VAR_streamDatabaseControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_VAR_streamDatabaseControllerRef :[deterministic]
assert P_SSL_VAR_streamDatabaseControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_VAR_streamDatabaseControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_VAR_streamDatabaseControllerRef
-- generate SSL_VAR_gameControllerRef
P_SSL_VAR_gameControllerRef = let
	id__ = 0
	
	
	
		
within
	SSL_VAR::gameControllerRef::O__(id__)

assert P_SSL_VAR_gameControllerRef :[deadlock-free]	
assert P_SSL_VAR_gameControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_VAR_gameControllerRef :[deterministic]
assert P_SSL_VAR_gameControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_VAR_gameControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_VAR_gameControllerRef
-- timed deadlock free
assert prioritise(P_SSL_VAR[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_VAR
