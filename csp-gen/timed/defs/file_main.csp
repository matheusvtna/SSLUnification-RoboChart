
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 10-12-2022 12:06:00
--
-- Iterated compression status: true
-- Assertions compression status: false
--


module SSL
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel sendRawFrame: InOut.core_string
	channel sendGameEventVision: InOut.core_string
	channel sendGameEventDecision: InOut.core_string
	
	channel moveCall: core_real.core_real
	channel stopCall
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		sendRawFrame,
		sendGameEventVision,
		sendGameEventDecision
	,	moveCall,
		stopCall
	|}
	
	-- declaring controller
		module visionControllerRef
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel receiveGameEvent: InOut.core_string
			channel receiveRawFrame: InOut.core_string
			channel sendFrameDecision: InOut.core_string
			channel sendFieldDecision: InOut.core_string
			channel sendFrameBehavior: InOut.core_string
			channel sendFieldBehavior: InOut.core_string
			channel sendFramePlanning: InOut.core_string
			channel sendFieldPlanning: InOut.core_string
			channel sendFrameNavigation: InOut.core_string
			channel sendFieldNavigation: InOut.core_string
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	receiveGameEvent,
				receiveRawFrame,
				sendFrameDecision,
				sendFieldDecision,
				sendFrameBehavior,
				sendFieldBehavior,
				sendFramePlanning,
				sendFieldPlanning,
				sendFrameNavigation,
				sendFieldNavigation
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i|
				              NID_f
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i::enter,
				f::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f : core_clock_type 
				--channel increment__
				
				CLID_f_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f
					module f
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i::enter,
								f::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i::D__(id__)
									   [| { share__, terminate } |] (
									   f::D__(id__)
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__) =
						(IteratedBehaviour(id__))
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i::enter,
								f::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i::VS_O__(id__)
									   [| { share__, terminate } |] (
									   f::VS_O__(id__)
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__) =
						(IteratedBehaviour_VS_O(id__))
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__) = terminate -> SKIP
					
					clockSync = {||}
					
					
					StateClocks(id__) = terminate -> SKIP
					
					stateClockSync = {||}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__) = prioritise(	((
							stm_ref0::D__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__) = prioritise(	((
							stm_ref0::VS__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__) = dbisim(prioritise(	((
							stm_ref0::O__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__) = dbisim(prioritise(	((
							stm_ref0::VS_O__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
			}
	
		endmodule
		module decisionControllerRef
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel receiveGameEvent: InOut.core_string
			channel receiveFrame: InOut.core_string
			channel receiveField: InOut.core_string
			channel sendTactic: InOut.core_string
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	receiveGameEvent,
				receiveFrame,
				receiveField,
				sendTactic
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_f0|
				              NID_i0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				f0::enter,
				i0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : core_clock_type 
				--channel increment__
				
				CLID_f0_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								f0::enter,
								i0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   f0::D__(id__)
									   [| { share__, terminate } |] (
									   i0::D__(id__)
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__) =
						(IteratedBehaviour(id__))
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								f0::enter,
								i0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   f0::VS_O__(id__)
									   [| { share__, terminate } |] (
									   i0::VS_O__(id__)
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__) =
						(IteratedBehaviour_VS_O(id__))
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__) = terminate -> SKIP
					
					clockSync = {||}
					
					
					StateClocks(id__) = terminate -> SKIP
					
					stateClockSync = {||}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__) = prioritise(	((
							stm_ref0::D__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__) = prioritise(	((
							stm_ref0::VS__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__) = dbisim(prioritise(	((
							stm_ref0::O__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__) = dbisim(prioritise(	((
							stm_ref0::VS_O__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
			}
	
		endmodule
		module behaviorControllerRef
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel receiveFrame: InOut.core_string
			channel receiveField: InOut.core_string
			channel receiveTactic: InOut.core_string
			channel sendAction: InOut.core_string
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	receiveFrame,
				receiveField,
				receiveTactic,
				sendAction
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : core_clock_type 
				--channel increment__
				
				CLID_f0_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::D__(id__)
									   [| { share__, terminate } |] (
									   f0::D__(id__)
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__) =
						(IteratedBehaviour(id__))
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::VS_O__(id__)
									   [| { share__, terminate } |] (
									   f0::VS_O__(id__)
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__) =
						(IteratedBehaviour_VS_O(id__))
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__) = terminate -> SKIP
					
					clockSync = {||}
					
					
					StateClocks(id__) = terminate -> SKIP
					
					stateClockSync = {||}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__) = prioritise(	((
							stm_ref0::D__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__) = prioritise(	((
							stm_ref0::VS__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__) = dbisim(prioritise(	((
							stm_ref0::O__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__) = dbisim(prioritise(	((
							stm_ref0::VS_O__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
			}
	
		endmodule
		module planningControllerRef
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel receiveFrame: InOut.core_string
			channel receiveField: InOut.core_string
			channel receiveAction: InOut.core_string
			channel sendCommand: InOut.core_string
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	receiveFrame,
				receiveField,
				receiveAction,
				sendCommand
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i|
				              NID_f
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i::enter,
				f::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f : core_clock_type 
				--channel increment__
				
				CLID_f_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f
					module f
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i::enter,
								f::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i::D__(id__)
									   [| { share__, terminate } |] (
									   f::D__(id__)
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__) =
						(IteratedBehaviour(id__))
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i::enter,
								f::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i::VS_O__(id__)
									   [| { share__, terminate } |] (
									   f::VS_O__(id__)
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__) =
						(IteratedBehaviour_VS_O(id__))
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__) = terminate -> SKIP
					
					clockSync = {||}
					
					
					StateClocks(id__) = terminate -> SKIP
					
					stateClockSync = {||}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__) = prioritise(	((
							stm_ref0::D__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__) = prioritise(	((
							stm_ref0::VS__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__) = dbisim(prioritise(	((
							stm_ref0::O__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__) = dbisim(prioritise(	((
							stm_ref0::VS_O__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
			}
	
		endmodule
		module navigationControllerRef
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel receiveFrame: InOut.core_string
			channel receiveField: InOut.core_string
			channel receiveCommand: InOut.core_string
			
			
			
			-- declaring call and ret events for undefined operations
			channel stopCall
			channel moveCall: core_real.core_real
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	receiveFrame,
				receiveField,
				receiveCommand
			,	stopCall,
				moveCall
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i|
				              NID_f
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i::enter,
				f::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f : core_clock_type 
				--channel increment__
				
				CLID_f_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f
					module f
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i::enter,
								f::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i::D__(id__)
									   [| { share__, terminate } |] (
									   f::D__(id__)
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__) =
						(IteratedBehaviour(id__))
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i::enter,
								f::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i::VS_O__(id__)
									   [| { share__, terminate } |] (
									   f::VS_O__(id__)
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__) =
						(IteratedBehaviour_VS_O(id__))
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__) = terminate -> SKIP
					
					clockSync = {||}
					
					
					StateClocks(id__) = terminate -> SKIP
					
					stateClockSync = {||}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					CALL__stop(id__) 	= stopCall -> SKIP
					CALL__move(id__,
							    param_linearVelocity,
							    param_angularVelocity) 	= moveCall.param_linearVelocity.param_angularVelocity -> SKIP
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__) = prioritise(	((
							stm_ref0::D__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__) = prioritise(	((
							stm_ref0::VS__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__) = dbisim(prioritise(	((
							stm_ref0::O__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__) = dbisim(prioritise(	((
							stm_ref0::VS_O__(id__)[[
								stm_ref0::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
			}
	
		endmodule
	
	Timed(OneStep) {
		visibleMemoryEvents = {||}
		
		-- declaring module memory
		Memory(id__) = SKIP
		
		D__(id__) = prioritise(let
			Buffer0(<v>) = 
				visionControllerRef::sendFrameDecision.out?x -> Buffer0(<x>)
				[]
				decisionControllerRef::receiveFrame.in!v -> Buffer0(<>)
			Buffer0(<>) = visionControllerRef::sendFrameDecision.out?x -> Buffer0(<x>)
			Buffer1(<v>) = 
				visionControllerRef::sendFrameBehavior.out?x -> Buffer1(<x>)
				[]
				behaviorControllerRef::receiveField.in!v -> Buffer1(<>)
			Buffer1(<>) = visionControllerRef::sendFrameBehavior.out?x -> Buffer1(<x>)
			Buffer2(<v>) = 
				visionControllerRef::sendFramePlanning.out?x -> Buffer2(<x>)
				[]
				planningControllerRef::receiveFrame.in!v -> Buffer2(<>)
			Buffer2(<>) = visionControllerRef::sendFramePlanning.out?x -> Buffer2(<x>)
			Buffer3(<v>) = 
				visionControllerRef::sendFrameNavigation.out?x -> Buffer3(<x>)
				[]
				navigationControllerRef::receiveFrame.in!v -> Buffer3(<>)
			Buffer3(<>) = visionControllerRef::sendFrameNavigation.out?x -> Buffer3(<x>)
			Buffer4(<v>) = 
				visionControllerRef::sendFieldDecision.out?x -> Buffer4(<x>)
				[]
				decisionControllerRef::receiveField.in!v -> Buffer4(<>)
			Buffer4(<>) = visionControllerRef::sendFieldDecision.out?x -> Buffer4(<x>)
			Buffer5(<v>) = 
				visionControllerRef::sendFieldBehavior.out?x -> Buffer5(<x>)
				[]
				behaviorControllerRef::receiveFrame.in!v -> Buffer5(<>)
			Buffer5(<>) = visionControllerRef::sendFieldBehavior.out?x -> Buffer5(<x>)
			Buffer6(<v>) = 
				visionControllerRef::sendFieldPlanning.out?x -> Buffer6(<x>)
				[]
				planningControllerRef::receiveField.in!v -> Buffer6(<>)
			Buffer6(<>) = visionControllerRef::sendFieldPlanning.out?x -> Buffer6(<x>)
			Buffer7(<v>) = 
				visionControllerRef::sendFieldNavigation.out?x -> Buffer7(<x>)
				[]
				navigationControllerRef::receiveField.in!v -> Buffer7(<>)
			Buffer7(<>) = visionControllerRef::sendFieldNavigation.out?x -> Buffer7(<x>)
			Buffer8(<v>) = 
				decisionControllerRef::sendTactic.out?x -> Buffer8(<x>)
				[]
				behaviorControllerRef::receiveTactic.in!v -> Buffer8(<>)
			Buffer8(<>) = decisionControllerRef::sendTactic.out?x -> Buffer8(<x>)
			Buffer9(<v>) = 
				behaviorControllerRef::sendAction.out?x -> Buffer9(<x>)
				[]
				planningControllerRef::receiveAction.in!v -> Buffer9(<>)
			Buffer9(<>) = behaviorControllerRef::sendAction.out?x -> Buffer9(<x>)
			Buffer10(<v>) = 
				planningControllerRef::sendCommand.out?x -> Buffer10(<x>)
				[]
				navigationControllerRef::receiveCommand.in!v -> Buffer10(<>)
			Buffer10(<>) = planningControllerRef::sendCommand.out?x -> Buffer10(<x>)
			
		within
			(
				(
					(Buffer0(<>)|||
					Buffer1(<>)|||
					Buffer2(<>)|||
					Buffer3(<>)|||
					Buffer4(<>)|||
					Buffer5(<>)|||
					Buffer6(<>)|||
					Buffer7(<>)|||
					Buffer8(<>)|||
					Buffer9(<>)|||
					Buffer10(<>)
					)
						[|{|decisionControllerRef::receiveFrame,visionControllerRef::sendFrameDecision,behaviorControllerRef::receiveField,visionControllerRef::sendFrameBehavior,planningControllerRef::receiveFrame,visionControllerRef::sendFramePlanning,navigationControllerRef::receiveFrame,visionControllerRef::sendFrameNavigation,decisionControllerRef::receiveField,visionControllerRef::sendFieldDecision,behaviorControllerRef::receiveFrame,visionControllerRef::sendFieldBehavior,planningControllerRef::receiveField,visionControllerRef::sendFieldPlanning,navigationControllerRef::receiveField,visionControllerRef::sendFieldNavigation,behaviorControllerRef::receiveTactic,decisionControllerRef::sendTactic,planningControllerRef::receiveAction,behaviorControllerRef::sendAction,navigationControllerRef::receiveCommand,planningControllerRef::sendCommand|}|]
					(
						(
							(
								visionControllerRef::D__(id__)[[
									visionControllerRef::terminate <- terminate,
									visionControllerRef::receiveRawFrame <- sendRawFrame,
									visionControllerRef::receiveGameEvent <- sendGameEventVision
								]]
							)
								[|{|terminate|}|]
							(
								(
									decisionControllerRef::D__(id__)[[
										decisionControllerRef::terminate <- terminate,
										decisionControllerRef::receiveGameEvent <- sendGameEventDecision
									]]
								)
									[|{|terminate|}|]
								(
									(
										behaviorControllerRef::D__(id__)[[
											behaviorControllerRef::terminate <- terminate
										]]
									)
										[|{|terminate|}|]
									(
										(
											planningControllerRef::D__(id__)[[
												planningControllerRef::terminate <- terminate
											]]
										)
											[|{|terminate|}|]
										(
											navigationControllerRef::D__(id__)[[
												navigationControllerRef::terminate <- terminate,
												navigationControllerRef::stopCall <- stopCall,
												navigationControllerRef::moveCall <- moveCall
											]]
										)
									)
									\
									diff(
										{|terminate|},
										{|terminate|}
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
						decisionControllerRef::receiveFrame,
						visionControllerRef::sendFrameDecision,
						behaviorControllerRef::receiveField,
						visionControllerRef::sendFrameBehavior,
						planningControllerRef::receiveFrame,
						visionControllerRef::sendFramePlanning,
						navigationControllerRef::receiveFrame,
						visionControllerRef::sendFrameNavigation,
						decisionControllerRef::receiveField,
						visionControllerRef::sendFieldDecision,
						behaviorControllerRef::receiveFrame,
						visionControllerRef::sendFieldBehavior,
						planningControllerRef::receiveField,
						visionControllerRef::sendFieldPlanning,
						navigationControllerRef::receiveField,
						visionControllerRef::sendFieldNavigation,
						behaviorControllerRef::receiveTactic,
						decisionControllerRef::sendTactic,
						planningControllerRef::receiveAction,
						behaviorControllerRef::sendAction,
						navigationControllerRef::receiveCommand,
						planningControllerRef::sendCommand
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- visible state equivalent
		
		VS__(id__) = prioritise(let
			Buffer0(<v>) = 
				visionControllerRef::sendFrameDecision.out?x -> Buffer0(<x>)
				[]
				decisionControllerRef::receiveFrame.in!v -> Buffer0(<>)
			Buffer0(<>) = visionControllerRef::sendFrameDecision.out?x -> Buffer0(<x>)
			Buffer1(<v>) = 
				visionControllerRef::sendFrameBehavior.out?x -> Buffer1(<x>)
				[]
				behaviorControllerRef::receiveField.in!v -> Buffer1(<>)
			Buffer1(<>) = visionControllerRef::sendFrameBehavior.out?x -> Buffer1(<x>)
			Buffer2(<v>) = 
				visionControllerRef::sendFramePlanning.out?x -> Buffer2(<x>)
				[]
				planningControllerRef::receiveFrame.in!v -> Buffer2(<>)
			Buffer2(<>) = visionControllerRef::sendFramePlanning.out?x -> Buffer2(<x>)
			Buffer3(<v>) = 
				visionControllerRef::sendFrameNavigation.out?x -> Buffer3(<x>)
				[]
				navigationControllerRef::receiveFrame.in!v -> Buffer3(<>)
			Buffer3(<>) = visionControllerRef::sendFrameNavigation.out?x -> Buffer3(<x>)
			Buffer4(<v>) = 
				visionControllerRef::sendFieldDecision.out?x -> Buffer4(<x>)
				[]
				decisionControllerRef::receiveField.in!v -> Buffer4(<>)
			Buffer4(<>) = visionControllerRef::sendFieldDecision.out?x -> Buffer4(<x>)
			Buffer5(<v>) = 
				visionControllerRef::sendFieldBehavior.out?x -> Buffer5(<x>)
				[]
				behaviorControllerRef::receiveFrame.in!v -> Buffer5(<>)
			Buffer5(<>) = visionControllerRef::sendFieldBehavior.out?x -> Buffer5(<x>)
			Buffer6(<v>) = 
				visionControllerRef::sendFieldPlanning.out?x -> Buffer6(<x>)
				[]
				planningControllerRef::receiveField.in!v -> Buffer6(<>)
			Buffer6(<>) = visionControllerRef::sendFieldPlanning.out?x -> Buffer6(<x>)
			Buffer7(<v>) = 
				visionControllerRef::sendFieldNavigation.out?x -> Buffer7(<x>)
				[]
				navigationControllerRef::receiveField.in!v -> Buffer7(<>)
			Buffer7(<>) = visionControllerRef::sendFieldNavigation.out?x -> Buffer7(<x>)
			Buffer8(<v>) = 
				decisionControllerRef::sendTactic.out?x -> Buffer8(<x>)
				[]
				behaviorControllerRef::receiveTactic.in!v -> Buffer8(<>)
			Buffer8(<>) = decisionControllerRef::sendTactic.out?x -> Buffer8(<x>)
			Buffer9(<v>) = 
				behaviorControllerRef::sendAction.out?x -> Buffer9(<x>)
				[]
				planningControllerRef::receiveAction.in!v -> Buffer9(<>)
			Buffer9(<>) = behaviorControllerRef::sendAction.out?x -> Buffer9(<x>)
			Buffer10(<v>) = 
				planningControllerRef::sendCommand.out?x -> Buffer10(<x>)
				[]
				navigationControllerRef::receiveCommand.in!v -> Buffer10(<>)
			Buffer10(<>) = planningControllerRef::sendCommand.out?x -> Buffer10(<x>)
			
		within
			(
				(
					(Buffer0(<>)|||
					Buffer1(<>)|||
					Buffer2(<>)|||
					Buffer3(<>)|||
					Buffer4(<>)|||
					Buffer5(<>)|||
					Buffer6(<>)|||
					Buffer7(<>)|||
					Buffer8(<>)|||
					Buffer9(<>)|||
					Buffer10(<>)
					)
						[|{|decisionControllerRef::receiveFrame,visionControllerRef::sendFrameDecision,behaviorControllerRef::receiveField,visionControllerRef::sendFrameBehavior,planningControllerRef::receiveFrame,visionControllerRef::sendFramePlanning,navigationControllerRef::receiveFrame,visionControllerRef::sendFrameNavigation,decisionControllerRef::receiveField,visionControllerRef::sendFieldDecision,behaviorControllerRef::receiveFrame,visionControllerRef::sendFieldBehavior,planningControllerRef::receiveField,visionControllerRef::sendFieldPlanning,navigationControllerRef::receiveField,visionControllerRef::sendFieldNavigation,behaviorControllerRef::receiveTactic,decisionControllerRef::sendTactic,planningControllerRef::receiveAction,behaviorControllerRef::sendAction,navigationControllerRef::receiveCommand,planningControllerRef::sendCommand|}|]
					(
						(
							(
								visionControllerRef::VS__(id__)[[
									visionControllerRef::terminate <- terminate,
									visionControllerRef::receiveRawFrame <- sendRawFrame,
									visionControllerRef::receiveGameEvent <- sendGameEventVision
								]]
							)
								[|{|terminate|}|]
							(
								(
									decisionControllerRef::VS__(id__)[[
										decisionControllerRef::terminate <- terminate,
										decisionControllerRef::receiveGameEvent <- sendGameEventDecision
									]]
								)
									[|{|terminate|}|]
								(
									(
										behaviorControllerRef::VS__(id__)[[
											behaviorControllerRef::terminate <- terminate
										]]
									)
										[|{|terminate|}|]
									(
										(
											planningControllerRef::VS__(id__)[[
												planningControllerRef::terminate <- terminate
											]]
										)
											[|{|terminate|}|]
										(
											navigationControllerRef::VS__(id__)[[
												navigationControllerRef::terminate <- terminate,
												navigationControllerRef::stopCall <- stopCall,
												navigationControllerRef::moveCall <- moveCall
											]]
										)
									)
									\
									diff(
										{|terminate|},
										{|terminate|}
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
						decisionControllerRef::receiveFrame,
						visionControllerRef::sendFrameDecision,
						behaviorControllerRef::receiveField,
						visionControllerRef::sendFrameBehavior,
						planningControllerRef::receiveFrame,
						visionControllerRef::sendFramePlanning,
						navigationControllerRef::receiveFrame,
						visionControllerRef::sendFrameNavigation,
						decisionControllerRef::receiveField,
						visionControllerRef::sendFieldDecision,
						behaviorControllerRef::receiveFrame,
						visionControllerRef::sendFieldBehavior,
						planningControllerRef::receiveField,
						visionControllerRef::sendFieldPlanning,
						navigationControllerRef::receiveField,
						visionControllerRef::sendFieldNavigation,
						behaviorControllerRef::receiveTactic,
						decisionControllerRef::sendTactic,
						planningControllerRef::receiveAction,
						behaviorControllerRef::sendAction,
						navigationControllerRef::receiveCommand,
						planningControllerRef::sendCommand
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- O version (optimised)
		
		O__(id__) = dbisim(prioritise(let
			Buffer0(<v>) = 
				visionControllerRef::sendFrameDecision.out?x -> Buffer0(<x>)
				[]
				decisionControllerRef::receiveFrame.in!v -> Buffer0(<>)
			Buffer0(<>) = visionControllerRef::sendFrameDecision.out?x -> Buffer0(<x>)
			Buffer1(<v>) = 
				visionControllerRef::sendFrameBehavior.out?x -> Buffer1(<x>)
				[]
				behaviorControllerRef::receiveField.in!v -> Buffer1(<>)
			Buffer1(<>) = visionControllerRef::sendFrameBehavior.out?x -> Buffer1(<x>)
			Buffer2(<v>) = 
				visionControllerRef::sendFramePlanning.out?x -> Buffer2(<x>)
				[]
				planningControllerRef::receiveFrame.in!v -> Buffer2(<>)
			Buffer2(<>) = visionControllerRef::sendFramePlanning.out?x -> Buffer2(<x>)
			Buffer3(<v>) = 
				visionControllerRef::sendFrameNavigation.out?x -> Buffer3(<x>)
				[]
				navigationControllerRef::receiveFrame.in!v -> Buffer3(<>)
			Buffer3(<>) = visionControllerRef::sendFrameNavigation.out?x -> Buffer3(<x>)
			Buffer4(<v>) = 
				visionControllerRef::sendFieldDecision.out?x -> Buffer4(<x>)
				[]
				decisionControllerRef::receiveField.in!v -> Buffer4(<>)
			Buffer4(<>) = visionControllerRef::sendFieldDecision.out?x -> Buffer4(<x>)
			Buffer5(<v>) = 
				visionControllerRef::sendFieldBehavior.out?x -> Buffer5(<x>)
				[]
				behaviorControllerRef::receiveFrame.in!v -> Buffer5(<>)
			Buffer5(<>) = visionControllerRef::sendFieldBehavior.out?x -> Buffer5(<x>)
			Buffer6(<v>) = 
				visionControllerRef::sendFieldPlanning.out?x -> Buffer6(<x>)
				[]
				planningControllerRef::receiveField.in!v -> Buffer6(<>)
			Buffer6(<>) = visionControllerRef::sendFieldPlanning.out?x -> Buffer6(<x>)
			Buffer7(<v>) = 
				visionControllerRef::sendFieldNavigation.out?x -> Buffer7(<x>)
				[]
				navigationControllerRef::receiveField.in!v -> Buffer7(<>)
			Buffer7(<>) = visionControllerRef::sendFieldNavigation.out?x -> Buffer7(<x>)
			Buffer8(<v>) = 
				decisionControllerRef::sendTactic.out?x -> Buffer8(<x>)
				[]
				behaviorControllerRef::receiveTactic.in!v -> Buffer8(<>)
			Buffer8(<>) = decisionControllerRef::sendTactic.out?x -> Buffer8(<x>)
			Buffer9(<v>) = 
				behaviorControllerRef::sendAction.out?x -> Buffer9(<x>)
				[]
				planningControllerRef::receiveAction.in!v -> Buffer9(<>)
			Buffer9(<>) = behaviorControllerRef::sendAction.out?x -> Buffer9(<x>)
			Buffer10(<v>) = 
				planningControllerRef::sendCommand.out?x -> Buffer10(<x>)
				[]
				navigationControllerRef::receiveCommand.in!v -> Buffer10(<>)
			Buffer10(<>) = planningControllerRef::sendCommand.out?x -> Buffer10(<x>)
			
		within
			(
				(
					(Buffer0(<>)|||
					Buffer1(<>)|||
					Buffer2(<>)|||
					Buffer3(<>)|||
					Buffer4(<>)|||
					Buffer5(<>)|||
					Buffer6(<>)|||
					Buffer7(<>)|||
					Buffer8(<>)|||
					Buffer9(<>)|||
					Buffer10(<>)
					)
						[|{|decisionControllerRef::receiveFrame,visionControllerRef::sendFrameDecision,behaviorControllerRef::receiveField,visionControllerRef::sendFrameBehavior,planningControllerRef::receiveFrame,visionControllerRef::sendFramePlanning,navigationControllerRef::receiveFrame,visionControllerRef::sendFrameNavigation,decisionControllerRef::receiveField,visionControllerRef::sendFieldDecision,behaviorControllerRef::receiveFrame,visionControllerRef::sendFieldBehavior,planningControllerRef::receiveField,visionControllerRef::sendFieldPlanning,navigationControllerRef::receiveField,visionControllerRef::sendFieldNavigation,behaviorControllerRef::receiveTactic,decisionControllerRef::sendTactic,planningControllerRef::receiveAction,behaviorControllerRef::sendAction,navigationControllerRef::receiveCommand,planningControllerRef::sendCommand|}|]
					(
						(
							(
								visionControllerRef::O__(id__)[[
									visionControllerRef::terminate <- terminate,
									visionControllerRef::receiveRawFrame <- sendRawFrame,
									visionControllerRef::receiveGameEvent <- sendGameEventVision
								]]
							)
								[|{|terminate|}|]
							(
								(
									decisionControllerRef::O__(id__)[[
										decisionControllerRef::terminate <- terminate,
										decisionControllerRef::receiveGameEvent <- sendGameEventDecision
									]]
								)
									[|{|terminate|}|]
								(
									(
										behaviorControllerRef::O__(id__)[[
											behaviorControllerRef::terminate <- terminate
										]]
									)
										[|{|terminate|}|]
									(
										(
											planningControllerRef::O__(id__)[[
												planningControllerRef::terminate <- terminate
											]]
										)
											[|{|terminate|}|]
										(
											navigationControllerRef::O__(id__)[[
												navigationControllerRef::terminate <- terminate,
												navigationControllerRef::stopCall <- stopCall,
												navigationControllerRef::moveCall <- moveCall
											]]
										)
									)
									\
									diff(
										{|terminate|},
										{|terminate|}
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
						decisionControllerRef::receiveFrame,
						visionControllerRef::sendFrameDecision,
						behaviorControllerRef::receiveField,
						visionControllerRef::sendFrameBehavior,
						planningControllerRef::receiveFrame,
						visionControllerRef::sendFramePlanning,
						navigationControllerRef::receiveFrame,
						visionControllerRef::sendFrameNavigation,
						decisionControllerRef::receiveField,
						visionControllerRef::sendFieldDecision,
						behaviorControllerRef::receiveFrame,
						visionControllerRef::sendFieldBehavior,
						planningControllerRef::receiveField,
						visionControllerRef::sendFieldPlanning,
						navigationControllerRef::receiveField,
						visionControllerRef::sendFieldNavigation,
						behaviorControllerRef::receiveTactic,
						decisionControllerRef::sendTactic,
						planningControllerRef::receiveAction,
						behaviorControllerRef::sendAction,
						navigationControllerRef::receiveCommand,
						planningControllerRef::sendCommand
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- visible state optimised equivalent
		
		VS_O__(id__) = dbisim(prioritise(let
			Buffer0(<v>) = 
				visionControllerRef::sendFrameDecision.out?x -> Buffer0(<x>)
				[]
				decisionControllerRef::receiveFrame.in!v -> Buffer0(<>)
			Buffer0(<>) = visionControllerRef::sendFrameDecision.out?x -> Buffer0(<x>)
			Buffer1(<v>) = 
				visionControllerRef::sendFrameBehavior.out?x -> Buffer1(<x>)
				[]
				behaviorControllerRef::receiveField.in!v -> Buffer1(<>)
			Buffer1(<>) = visionControllerRef::sendFrameBehavior.out?x -> Buffer1(<x>)
			Buffer2(<v>) = 
				visionControllerRef::sendFramePlanning.out?x -> Buffer2(<x>)
				[]
				planningControllerRef::receiveFrame.in!v -> Buffer2(<>)
			Buffer2(<>) = visionControllerRef::sendFramePlanning.out?x -> Buffer2(<x>)
			Buffer3(<v>) = 
				visionControllerRef::sendFrameNavigation.out?x -> Buffer3(<x>)
				[]
				navigationControllerRef::receiveFrame.in!v -> Buffer3(<>)
			Buffer3(<>) = visionControllerRef::sendFrameNavigation.out?x -> Buffer3(<x>)
			Buffer4(<v>) = 
				visionControllerRef::sendFieldDecision.out?x -> Buffer4(<x>)
				[]
				decisionControllerRef::receiveField.in!v -> Buffer4(<>)
			Buffer4(<>) = visionControllerRef::sendFieldDecision.out?x -> Buffer4(<x>)
			Buffer5(<v>) = 
				visionControllerRef::sendFieldBehavior.out?x -> Buffer5(<x>)
				[]
				behaviorControllerRef::receiveFrame.in!v -> Buffer5(<>)
			Buffer5(<>) = visionControllerRef::sendFieldBehavior.out?x -> Buffer5(<x>)
			Buffer6(<v>) = 
				visionControllerRef::sendFieldPlanning.out?x -> Buffer6(<x>)
				[]
				planningControllerRef::receiveField.in!v -> Buffer6(<>)
			Buffer6(<>) = visionControllerRef::sendFieldPlanning.out?x -> Buffer6(<x>)
			Buffer7(<v>) = 
				visionControllerRef::sendFieldNavigation.out?x -> Buffer7(<x>)
				[]
				navigationControllerRef::receiveField.in!v -> Buffer7(<>)
			Buffer7(<>) = visionControllerRef::sendFieldNavigation.out?x -> Buffer7(<x>)
			Buffer8(<v>) = 
				decisionControllerRef::sendTactic.out?x -> Buffer8(<x>)
				[]
				behaviorControllerRef::receiveTactic.in!v -> Buffer8(<>)
			Buffer8(<>) = decisionControllerRef::sendTactic.out?x -> Buffer8(<x>)
			Buffer9(<v>) = 
				behaviorControllerRef::sendAction.out?x -> Buffer9(<x>)
				[]
				planningControllerRef::receiveAction.in!v -> Buffer9(<>)
			Buffer9(<>) = behaviorControllerRef::sendAction.out?x -> Buffer9(<x>)
			Buffer10(<v>) = 
				planningControllerRef::sendCommand.out?x -> Buffer10(<x>)
				[]
				navigationControllerRef::receiveCommand.in!v -> Buffer10(<>)
			Buffer10(<>) = planningControllerRef::sendCommand.out?x -> Buffer10(<x>)
			
		within
			(
				(
					(Buffer0(<>)|||
					Buffer1(<>)|||
					Buffer2(<>)|||
					Buffer3(<>)|||
					Buffer4(<>)|||
					Buffer5(<>)|||
					Buffer6(<>)|||
					Buffer7(<>)|||
					Buffer8(<>)|||
					Buffer9(<>)|||
					Buffer10(<>)
					)
						[|{|decisionControllerRef::receiveFrame,visionControllerRef::sendFrameDecision,behaviorControllerRef::receiveField,visionControllerRef::sendFrameBehavior,planningControllerRef::receiveFrame,visionControllerRef::sendFramePlanning,navigationControllerRef::receiveFrame,visionControllerRef::sendFrameNavigation,decisionControllerRef::receiveField,visionControllerRef::sendFieldDecision,behaviorControllerRef::receiveFrame,visionControllerRef::sendFieldBehavior,planningControllerRef::receiveField,visionControllerRef::sendFieldPlanning,navigationControllerRef::receiveField,visionControllerRef::sendFieldNavigation,behaviorControllerRef::receiveTactic,decisionControllerRef::sendTactic,planningControllerRef::receiveAction,behaviorControllerRef::sendAction,navigationControllerRef::receiveCommand,planningControllerRef::sendCommand|}|]
					(
						(
							(
								visionControllerRef::VS_O__(id__)[[
									visionControllerRef::terminate <- terminate,
									visionControllerRef::receiveRawFrame <- sendRawFrame,
									visionControllerRef::receiveGameEvent <- sendGameEventVision
								]]
							)
								[|{|terminate|}|]
							(
								(
									decisionControllerRef::VS_O__(id__)[[
										decisionControllerRef::terminate <- terminate,
										decisionControllerRef::receiveGameEvent <- sendGameEventDecision
									]]
								)
									[|{|terminate|}|]
								(
									(
										behaviorControllerRef::VS_O__(id__)[[
											behaviorControllerRef::terminate <- terminate
										]]
									)
										[|{|terminate|}|]
									(
										(
											planningControllerRef::VS_O__(id__)[[
												planningControllerRef::terminate <- terminate
											]]
										)
											[|{|terminate|}|]
										(
											navigationControllerRef::VS_O__(id__)[[
												navigationControllerRef::terminate <- terminate,
												navigationControllerRef::stopCall <- stopCall,
												navigationControllerRef::moveCall <- moveCall
											]]
										)
									)
									\
									diff(
										{|terminate|},
										{|terminate|}
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
						decisionControllerRef::receiveFrame,
						visionControllerRef::sendFrameDecision,
						behaviorControllerRef::receiveField,
						visionControllerRef::sendFrameBehavior,
						planningControllerRef::receiveFrame,
						visionControllerRef::sendFramePlanning,
						navigationControllerRef::receiveFrame,
						visionControllerRef::sendFrameNavigation,
						decisionControllerRef::receiveField,
						visionControllerRef::sendFieldDecision,
						behaviorControllerRef::receiveFrame,
						visionControllerRef::sendFieldBehavior,
						planningControllerRef::receiveField,
						visionControllerRef::sendFieldPlanning,
						navigationControllerRef::receiveField,
						visionControllerRef::sendFieldNavigation,
						behaviorControllerRef::receiveTactic,
						decisionControllerRef::sendTactic,
						planningControllerRef::receiveAction,
						behaviorControllerRef::sendAction,
						navigationControllerRef::receiveCommand,
						planningControllerRef::sendCommand
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- O version (optimised) with visible assignments
		
		AS_O__(id__) = dbisim(let
			Buffer0(<v>) = 
				visionControllerRef::sendFrameDecision.out?x -> Buffer0(<x>)
				[]
				decisionControllerRef::receiveFrame.in!v -> Buffer0(<>)
			Buffer0(<>) = visionControllerRef::sendFrameDecision.out?x -> Buffer0(<x>)
			Buffer1(<v>) = 
				visionControllerRef::sendFrameBehavior.out?x -> Buffer1(<x>)
				[]
				behaviorControllerRef::receiveField.in!v -> Buffer1(<>)
			Buffer1(<>) = visionControllerRef::sendFrameBehavior.out?x -> Buffer1(<x>)
			Buffer2(<v>) = 
				visionControllerRef::sendFramePlanning.out?x -> Buffer2(<x>)
				[]
				planningControllerRef::receiveFrame.in!v -> Buffer2(<>)
			Buffer2(<>) = visionControllerRef::sendFramePlanning.out?x -> Buffer2(<x>)
			Buffer3(<v>) = 
				visionControllerRef::sendFrameNavigation.out?x -> Buffer3(<x>)
				[]
				navigationControllerRef::receiveFrame.in!v -> Buffer3(<>)
			Buffer3(<>) = visionControllerRef::sendFrameNavigation.out?x -> Buffer3(<x>)
			Buffer4(<v>) = 
				visionControllerRef::sendFieldDecision.out?x -> Buffer4(<x>)
				[]
				decisionControllerRef::receiveField.in!v -> Buffer4(<>)
			Buffer4(<>) = visionControllerRef::sendFieldDecision.out?x -> Buffer4(<x>)
			Buffer5(<v>) = 
				visionControllerRef::sendFieldBehavior.out?x -> Buffer5(<x>)
				[]
				behaviorControllerRef::receiveFrame.in!v -> Buffer5(<>)
			Buffer5(<>) = visionControllerRef::sendFieldBehavior.out?x -> Buffer5(<x>)
			Buffer6(<v>) = 
				visionControllerRef::sendFieldPlanning.out?x -> Buffer6(<x>)
				[]
				planningControllerRef::receiveField.in!v -> Buffer6(<>)
			Buffer6(<>) = visionControllerRef::sendFieldPlanning.out?x -> Buffer6(<x>)
			Buffer7(<v>) = 
				visionControllerRef::sendFieldNavigation.out?x -> Buffer7(<x>)
				[]
				navigationControllerRef::receiveField.in!v -> Buffer7(<>)
			Buffer7(<>) = visionControllerRef::sendFieldNavigation.out?x -> Buffer7(<x>)
			Buffer8(<v>) = 
				decisionControllerRef::sendTactic.out?x -> Buffer8(<x>)
				[]
				behaviorControllerRef::receiveTactic.in!v -> Buffer8(<>)
			Buffer8(<>) = decisionControllerRef::sendTactic.out?x -> Buffer8(<x>)
			Buffer9(<v>) = 
				behaviorControllerRef::sendAction.out?x -> Buffer9(<x>)
				[]
				planningControllerRef::receiveAction.in!v -> Buffer9(<>)
			Buffer9(<>) = behaviorControllerRef::sendAction.out?x -> Buffer9(<x>)
			Buffer10(<v>) = 
				planningControllerRef::sendCommand.out?x -> Buffer10(<x>)
				[]
				navigationControllerRef::receiveCommand.in!v -> Buffer10(<>)
			Buffer10(<>) = planningControllerRef::sendCommand.out?x -> Buffer10(<x>)
			
		within
			(
				(
					(Buffer0(<>)|||
					Buffer1(<>)|||
					Buffer2(<>)|||
					Buffer3(<>)|||
					Buffer4(<>)|||
					Buffer5(<>)|||
					Buffer6(<>)|||
					Buffer7(<>)|||
					Buffer8(<>)|||
					Buffer9(<>)|||
					Buffer10(<>)
					)
						[|{|decisionControllerRef::receiveFrame,visionControllerRef::sendFrameDecision,behaviorControllerRef::receiveField,visionControllerRef::sendFrameBehavior,planningControllerRef::receiveFrame,visionControllerRef::sendFramePlanning,navigationControllerRef::receiveFrame,visionControllerRef::sendFrameNavigation,decisionControllerRef::receiveField,visionControllerRef::sendFieldDecision,behaviorControllerRef::receiveFrame,visionControllerRef::sendFieldBehavior,planningControllerRef::receiveField,visionControllerRef::sendFieldPlanning,navigationControllerRef::receiveField,visionControllerRef::sendFieldNavigation,behaviorControllerRef::receiveTactic,decisionControllerRef::sendTactic,planningControllerRef::receiveAction,behaviorControllerRef::sendAction,navigationControllerRef::receiveCommand,planningControllerRef::sendCommand|}|]
					(
						(
							(
								visionControllerRef::O__(id__)[[
									visionControllerRef::terminate <- terminate,
									visionControllerRef::receiveRawFrame <- sendRawFrame,
									visionControllerRef::receiveGameEvent <- sendGameEventVision
								]]
							)
								[|{|terminate|}|]
							(
								(
									decisionControllerRef::O__(id__)[[
										decisionControllerRef::terminate <- terminate,
										decisionControllerRef::receiveGameEvent <- sendGameEventDecision
									]]
								)
									[|{|terminate|}|]
								(
									(
										behaviorControllerRef::O__(id__)[[
											behaviorControllerRef::terminate <- terminate
										]]
									)
										[|{|terminate|}|]
									(
										(
											planningControllerRef::O__(id__)[[
												planningControllerRef::terminate <- terminate
											]]
										)
											[|{|terminate|}|]
										(
											navigationControllerRef::O__(id__)[[
												navigationControllerRef::terminate <- terminate,
												navigationControllerRef::stopCall <- stopCall,
												navigationControllerRef::moveCall <- moveCall
											]]
										)
									)
									\
									diff(
										{|terminate|},
										{|terminate|}
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
						decisionControllerRef::receiveFrame,
						visionControllerRef::sendFrameDecision,
						behaviorControllerRef::receiveField,
						visionControllerRef::sendFrameBehavior,
						planningControllerRef::receiveFrame,
						visionControllerRef::sendFramePlanning,
						navigationControllerRef::receiveFrame,
						visionControllerRef::sendFrameNavigation,
						decisionControllerRef::receiveField,
						visionControllerRef::sendFieldDecision,
						behaviorControllerRef::receiveFrame,
						visionControllerRef::sendFieldBehavior,
						planningControllerRef::receiveField,
						visionControllerRef::sendFieldPlanning,
						navigationControllerRef::receiveField,
						visionControllerRef::sendFieldNavigation,
						behaviorControllerRef::receiveTactic,
						decisionControllerRef::sendTactic,
						planningControllerRef::receiveAction,
						behaviorControllerRef::sendAction,
						navigationControllerRef::receiveCommand,
						planningControllerRef::sendCommand
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		)
	}
	
endmodule




