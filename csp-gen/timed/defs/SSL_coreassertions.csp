
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 23-03-2024 14:58:16
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "core_timed_defs.csp"
include "file_main_defs.csp"
include "core_defs.csp"
include "SSL.csp"
include "state_timed_defs.csp"
include "robochart_defs.csp"
include "../instantiations.csp"

transparent wbisim
channel r__
-- generate SSL
P_SSL = let
	id__ = 0
	
	
	
	const_behavior_BehaviorController_stm_move_away_ref_TIME_LIMIT_TO_BEHAVE = 30
		
	
within
	SSL::O__(id__,
			    const_behavior_BehaviorController_stm_move_away_ref_TIME_LIMIT_TO_BEHAVE)
assert P_SSL :[deadlock-free]	
assert P_SSL;RUN({r__}) :[deadlock-free]
assert P_SSL :[deterministic]
assert P_SSL :[divergence-free]

-- generate SSL_visionControllerRef
P_SSL_visionControllerRef = let
	id__ = 0
	
	
	
		
within
	SSL::visionControllerRef::O__(id__)

assert P_SSL_visionControllerRef :[deadlock-free]	
assert P_SSL_visionControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_visionControllerRef :[deterministic]
assert P_SSL_visionControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_visionControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_visionControllerRef
-- generate SSL_decisionControllerRef
P_SSL_decisionControllerRef = let
	id__ = 0
	
	
	
		
within
	SSL::decisionControllerRef::O__(id__)

assert P_SSL_decisionControllerRef :[deadlock-free]	
assert P_SSL_decisionControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_decisionControllerRef :[deterministic]
assert P_SSL_decisionControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_decisionControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_decisionControllerRef
-- generate SSL_planningControllerRef
P_SSL_planningControllerRef = let
	id__ = 0
	
	
	
		
within
	SSL::planningControllerRef::O__(id__)

assert P_SSL_planningControllerRef :[deadlock-free]	
assert P_SSL_planningControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_planningControllerRef :[deterministic]
assert P_SSL_planningControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_planningControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_planningControllerRef
-- generate SSL_navigationControllerRef
P_SSL_navigationControllerRef = let
	id__ = 0
	
	
	
		
within
	SSL::navigationControllerRef::O__(id__)

assert P_SSL_navigationControllerRef :[deadlock-free]	
assert P_SSL_navigationControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_navigationControllerRef :[deterministic]
assert P_SSL_navigationControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_navigationControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_navigationControllerRef
-- generate SSL_behaviorControllerRef
P_SSL_behaviorControllerRef = let
	id__ = 0
	
	
	
	const_behavior_BehaviorController_stm_move_away_ref_TIME_LIMIT_TO_BEHAVE = 30
		
within
	SSL::behaviorControllerRef::O__(id__,
			    const_behavior_BehaviorController_stm_move_away_ref_TIME_LIMIT_TO_BEHAVE)

assert P_SSL_behaviorControllerRef :[deadlock-free]	
assert P_SSL_behaviorControllerRef;RUN({r__}) :[deadlock-free]
assert P_SSL_behaviorControllerRef :[deterministic]
assert P_SSL_behaviorControllerRef :[divergence-free]

-- timed deadlock free
assert prioritise(P_SSL_behaviorControllerRef[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL_behaviorControllerRef
-- timed deadlock free
assert prioritise(P_SSL[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_SSL
