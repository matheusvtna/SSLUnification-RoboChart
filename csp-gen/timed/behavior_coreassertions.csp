
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 21-11-2023 22:22:01
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "behavior.csp"

-- generate behavior_CarryBallOnBallPlacementSTM
P_behavior_CarryBallOnBallPlacementSTM = let
	id__ = 0
	
	
	
within
	behavior::CarryBallOnBallPlacementSTM::O__(
		id__
	)
assert P_behavior_CarryBallOnBallPlacementSTM :[deadlock-free]	
assert P_behavior_CarryBallOnBallPlacementSTM;RUN({r__}) :[deadlock-free]
assert P_behavior_CarryBallOnBallPlacementSTM :[deterministic]
assert P_behavior_CarryBallOnBallPlacementSTM :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_CarryBallOnBallPlacementSTM[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_CarryBallOnBallPlacementSTM
-- generate behavior_BehaviorSTM
P_behavior_BehaviorSTM = let
	id__ = 0
	
	
	
within
	behavior::BehaviorSTM::O__(
		id__
	)
assert P_behavior_BehaviorSTM :[deadlock-free]	
assert P_behavior_BehaviorSTM;RUN({r__}) :[deadlock-free]
assert P_behavior_BehaviorSTM :[deterministic]
assert P_behavior_BehaviorSTM :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_BehaviorSTM[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_BehaviorSTM
-- generate behavior_SkillSTM
P_behavior_SkillSTM = let
	id__ = 0
	
	
	
within
	behavior::SkillSTM::O__(
		id__
	)
assert P_behavior_SkillSTM :[deadlock-free]	
assert P_behavior_SkillSTM;RUN({r__}) :[deadlock-free]
assert P_behavior_SkillSTM :[deterministic]
assert P_behavior_SkillSTM :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_SkillSTM[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_SkillSTM
-- generate behavior_HaltSTM
P_behavior_HaltSTM = let
	id__ = 0
	
	
	
within
	behavior::HaltSTM::O__(
		id__
	)
assert P_behavior_HaltSTM :[deadlock-free]	
assert P_behavior_HaltSTM;RUN({r__}) :[deadlock-free]
assert P_behavior_HaltSTM :[deterministic]
assert P_behavior_HaltSTM :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_HaltSTM[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_HaltSTM


-- generate behavior_BehaviorController
P_behavior_BehaviorController = let
	id__ = 0
	
	
	
	const_behavior_BehaviorController_stm_move_away_ref_TIME_LIMIT_TO_BEHAVE = 30
		
within
	behavior::BehaviorController::O__(id__,
			    const_behavior_BehaviorController_stm_move_away_ref_TIME_LIMIT_TO_BEHAVE)

assert P_behavior_BehaviorController :[deadlock-free]	
assert P_behavior_BehaviorController;RUN({r__}) :[deadlock-free]
assert P_behavior_BehaviorController :[deterministic]
assert P_behavior_BehaviorController :[divergence-free]

-- generate behavior_BehaviorController_stm_behavior_ref
P_behavior_BehaviorController_stm_behavior_ref = let
	id__ = 0
	
	
	
within
	behavior::BehaviorController::stm_behavior_ref::O__(
		id__
	)
assert P_behavior_BehaviorController_stm_behavior_ref :[deadlock-free]	
assert P_behavior_BehaviorController_stm_behavior_ref;RUN({r__}) :[deadlock-free]
assert P_behavior_BehaviorController_stm_behavior_ref :[deterministic]
assert P_behavior_BehaviorController_stm_behavior_ref :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_BehaviorController_stm_behavior_ref[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_BehaviorController_stm_behavior_ref
-- generate behavior_BehaviorController_stm_carry_ball_on_ball_placement_ref
P_behavior_BehaviorController_stm_carry_ball_on_ball_placement_ref = let
	id__ = 0
	
	
	
within
	behavior::BehaviorController::stm_carry_ball_on_ball_placement_ref::O__(
		id__
	)
assert P_behavior_BehaviorController_stm_carry_ball_on_ball_placement_ref :[deadlock-free]	
assert P_behavior_BehaviorController_stm_carry_ball_on_ball_placement_ref;RUN({r__}) :[deadlock-free]
assert P_behavior_BehaviorController_stm_carry_ball_on_ball_placement_ref :[deterministic]
assert P_behavior_BehaviorController_stm_carry_ball_on_ball_placement_ref :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_BehaviorController_stm_carry_ball_on_ball_placement_ref[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_BehaviorController_stm_carry_ball_on_ball_placement_ref
-- generate behavior_BehaviorController_stm_go_to_behind_ball_ref
P_behavior_BehaviorController_stm_go_to_behind_ball_ref = let
	id__ = 0
	
	
	
within
	behavior::BehaviorController::stm_go_to_behind_ball_ref::O__(
		id__
	)
assert P_behavior_BehaviorController_stm_go_to_behind_ball_ref :[deadlock-free]	
assert P_behavior_BehaviorController_stm_go_to_behind_ball_ref;RUN({r__}) :[deadlock-free]
assert P_behavior_BehaviorController_stm_go_to_behind_ball_ref :[deterministic]
assert P_behavior_BehaviorController_stm_go_to_behind_ball_ref :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_BehaviorController_stm_go_to_behind_ball_ref[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_BehaviorController_stm_go_to_behind_ball_ref
-- generate behavior_BehaviorController_stm_approach_ball_ref
P_behavior_BehaviorController_stm_approach_ball_ref = let
	id__ = 0
	
	
	
within
	behavior::BehaviorController::stm_approach_ball_ref::O__(
		id__
	)
assert P_behavior_BehaviorController_stm_approach_ball_ref :[deadlock-free]	
assert P_behavior_BehaviorController_stm_approach_ball_ref;RUN({r__}) :[deadlock-free]
assert P_behavior_BehaviorController_stm_approach_ball_ref :[deterministic]
assert P_behavior_BehaviorController_stm_approach_ball_ref :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_BehaviorController_stm_approach_ball_ref[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_BehaviorController_stm_approach_ball_ref
-- generate behavior_BehaviorController_stm_carry_ball_ref
P_behavior_BehaviorController_stm_carry_ball_ref = let
	id__ = 0
	
	
	
within
	behavior::BehaviorController::stm_carry_ball_ref::O__(
		id__
	)
assert P_behavior_BehaviorController_stm_carry_ball_ref :[deadlock-free]	
assert P_behavior_BehaviorController_stm_carry_ball_ref;RUN({r__}) :[deadlock-free]
assert P_behavior_BehaviorController_stm_carry_ball_ref :[deterministic]
assert P_behavior_BehaviorController_stm_carry_ball_ref :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_BehaviorController_stm_carry_ball_ref[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_BehaviorController_stm_carry_ball_ref
-- generate behavior_BehaviorController_stm_move_away_ref
P_behavior_BehaviorController_stm_move_away_ref = let
	id__ = 0
	
	
	const_behavior_MoveAwayFromPositionSTM_TIME_LIMIT_TO_BEHAVE = 30
	
within
	behavior::BehaviorController::stm_move_away_ref::O__(
		id__,
		const_behavior_MoveAwayFromPositionSTM_TIME_LIMIT_TO_BEHAVE
	)
assert P_behavior_BehaviorController_stm_move_away_ref :[deadlock-free]	
assert P_behavior_BehaviorController_stm_move_away_ref;RUN({r__}) :[deadlock-free]
assert P_behavior_BehaviorController_stm_move_away_ref :[deterministic]
assert P_behavior_BehaviorController_stm_move_away_ref :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_BehaviorController_stm_move_away_ref[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_BehaviorController_stm_move_away_ref
-- generate behavior_BehaviorController_stm_skill_ref
P_behavior_BehaviorController_stm_skill_ref = let
	id__ = 0
	
	
	
within
	behavior::BehaviorController::stm_skill_ref::O__(
		id__
	)
assert P_behavior_BehaviorController_stm_skill_ref :[deadlock-free]	
assert P_behavior_BehaviorController_stm_skill_ref;RUN({r__}) :[deadlock-free]
assert P_behavior_BehaviorController_stm_skill_ref :[deterministic]
assert P_behavior_BehaviorController_stm_skill_ref :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_BehaviorController_stm_skill_ref[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_BehaviorController_stm_skill_ref
-- generate behavior_BehaviorController_stm_halt_ref
P_behavior_BehaviorController_stm_halt_ref = let
	id__ = 0
	
	
	
within
	behavior::BehaviorController::stm_halt_ref::O__(
		id__
	)
assert P_behavior_BehaviorController_stm_halt_ref :[deadlock-free]	
assert P_behavior_BehaviorController_stm_halt_ref;RUN({r__}) :[deadlock-free]
assert P_behavior_BehaviorController_stm_halt_ref :[deterministic]
assert P_behavior_BehaviorController_stm_halt_ref :[divergence-free]
-- timed deadlock free
assert prioritise(P_behavior_BehaviorController_stm_halt_ref[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_BehaviorController_stm_halt_ref
-- timed deadlock free
assert prioritise(P_behavior_BehaviorController[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_behavior_BehaviorController

