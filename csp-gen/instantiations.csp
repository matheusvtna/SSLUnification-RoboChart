-- generate string
nametype core_string = LSeq(Char,2)

-- generate getBall
getBall(frame) = (((0,0)),(0,0))

-- generate allyHasBall
allyHasBall(robot,ball) = true

-- generate -- OPERATION BOUNDS

-- MODULE CONSTANTS

-- CONTROLLER CONSTANTS

-- STATEMACHINE CONSTANTS

-- generate getTargetPosition
getTargetPosition(frame) = ((0,0))

-- generate const_goToPointAndStop_STOP_DIST_THRESHOLD
const_goToPointAndStop_STOP_DIST_THRESHOLD = 0

-- generate allyIsCloseToBall
allyIsCloseToBall(robot,ball) = true

-- generate Plus
Plus(e1,e2,T) = if member(e1+e2,T) then e1+e2 else e1

-- generate getBallPosition
getBallPosition(frame) = ((0,0))

-- generate allyIsBehindBall
allyIsBehindBall(robot,targetPosition) = true

-- generate getRobotAngle
getRobotAngle(frame) = 0

-- generate --

-- MODULE CONSTANTS

-- CONTROLLER CONSTANTS

-- STATEMACHINE CONSTANTS

-- generate nat
nametype core_nat = union({0..2},{calc_type_min(Union(
			{}))..calc_type_max(Union({}))})

-- generate getDistance
getDistance(source,target) = 0

-- generate getTargetAngle
getTargetAngle(frame) = 0

-- generate core_clock_type
nametype core_clock_type = {0..10}

-- BASIC FUNCTIONS

-- generate smallestAngleDiff
smallestAngleDiff(source,target) = 0

-- generate real
nametype core_real = union({ -2..2},{calc_type_min(Union(
			{{Robot_angle(robot)|robot <- Robot},{getTargetAngle(frame)|frame <- Frame},{getDistance(robotPosition,targetPosition)|robotPosition <- Position,targetPosition <- Position},{smallestAngleDiff(robotAngle,targetAngle)|robotAngle <- { -2..2},targetAngle <- { -2..2}},{getRobotAngle(frame)|frame <- Frame},{getTargetAngle(frame)|frame <- Frame},{getDistance(robotPosition,targetPosition)|robotPosition <- Position,targetPosition <- Position},{smallestAngleDiff(robotAngle,targetAngle)|robotAngle <- { -2..2},targetAngle <- { -2..2}},{ -2..2},{ -2..2},{ -2..2},{150},{ -2..2},{500},{ -2..2},{60},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{robotAngle|robotAngle <- { -2..2}},{MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES|MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES <- { -2..2}},{robotAngle|robotAngle <- { -2..2}},{angularVelocity|angularVelocity <- { -2..2}},{angleThreshold|angleThreshold <- { -2..2}},{MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES|MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES <- { -2..2}},{targetAngle|targetAngle <- { -2..2}},{DIST_THRESHOLD_BALL_TO_TARGET|DIST_THRESHOLD_BALL_TO_TARGET <- { -2..2}},{DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH|DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH <- { -2..2}},{linearVelocity|linearVelocity <- { -2..2}},{linearVelocity|linearVelocity <- { -2..2}},{angularVelocity|angularVelocity <- { -2..2}},{targetAngle|targetAngle <- { -2..2}}}))..calc_type_max(Union({{Robot_angle(robot)|robot <- Robot},{getTargetAngle(frame)|frame <- Frame},{getDistance(robotPosition,targetPosition)|robotPosition <- Position,targetPosition <- Position},{smallestAngleDiff(robotAngle,targetAngle)|robotAngle <- { -2..2},targetAngle <- { -2..2}},{getRobotAngle(frame)|frame <- Frame},{getTargetAngle(frame)|frame <- Frame},{getDistance(robotPosition,targetPosition)|robotPosition <- Position,targetPosition <- Position},{smallestAngleDiff(robotAngle,targetAngle)|robotAngle <- { -2..2},targetAngle <- { -2..2}},{ -2..2},{ -2..2},{ -2..2},{150},{ -2..2},{500},{ -2..2},{60},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{ -2..2},{robotAngle|robotAngle <- { -2..2}},{MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES|MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES <- { -2..2}},{robotAngle|robotAngle <- { -2..2}},{angularVelocity|angularVelocity <- { -2..2}},{angleThreshold|angleThreshold <- { -2..2}},{MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES|MIN_ANGLE_DIFF_TO_CONSIDER_ALIGNED_WITH_BALL_IN_DEGREES <- { -2..2}},{targetAngle|targetAngle <- { -2..2}},{DIST_THRESHOLD_BALL_TO_TARGET|DIST_THRESHOLD_BALL_TO_TARGET <- { -2..2}},{DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH|DIST_THREHOLD_ROBOT_TO_TARGET_ON_FINISH <- { -2..2}},{linearVelocity|linearVelocity <- { -2..2}},{linearVelocity|linearVelocity <- { -2..2}},{angularVelocity|angularVelocity <- { -2..2}},{targetAngle|targetAngle <- { -2..2}}}))}) 

-- VECTOR TYPES AND OPERATIONS


-- CLOCKS

-- generate getRobot
getRobot(frame) = (((0,0)),(0,0),0,0)

-- generate int
nametype core_int = union({ -2..2},{calc_type_min(Union(
			{}))..calc_type_max(Union({}))})

-- generate getRobotPosition
getRobotPosition(frame) = ((0,0))

-- generate Div
Div(e1,e2,T) = if member(e1/e2,T) then e1/e2 else e1

-- generate Neg
Neg(e1,T) = if member(-e1,T) then -e1 else e1

-- generate boolean
nametype core_boolean = Bool

-- generate Mult
Mult(e1,e2,T) = if member(e1*e2,T) then e1*e2 else e1

-- generate Modulus
Modulus(e1,e2,T) = if member(e1%e2,T) then e1%e2 else e1

-- generate const_goToPointAndStop_STOP_ANGLE_THRESHOLD
const_goToPointAndStop_STOP_ANGLE_THRESHOLD = 0

-- OPERATION CONSTANTS

-- BASIC TYPES

-- generate allyIsBehind
allyIsBehind(robot,targetPosition,angleThreshold) = true

-- generate Minus
Minus(e1,e2,T) = if member(e1-e2,T) then e1-e2 else e1

