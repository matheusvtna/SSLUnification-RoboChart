datatype Point {
	pos: real*real
}

function fromPolar(length: real, angle: real): Point {
	return Point(cos(angle) * length, sin(angle) * length)
}

function getDistance(source: Point, target: Point) : real {
	var distance = sqrt((source.x - target.x)^2 + (source.y - target.y)^2)
	return distance
}

function norm(point: Point): real {
	var n = sqrt(point.x^2 + point.y^2)
	return n
}

function unitVector(source: Point): Point {
	var n = norm(source)
	if(n > 0) {
		return Point(source.x/n, source.y/n)
	}
	// TODO: Alguma forma de levantar um erro?
	return source
}

function createVector(source: Point, target: Point): Point {
	return Point(target.x - source.x, target.y - source.y)
}

function createUnitVector(source: Point, target: Point): Point {
	var vec = createVector(source, target)
	return unitVector(vec)
}

function dot(source: Point, target: Point): real {
	return source.x*target.x + source.y*target.y
}

function cross(source: Point, target: Point): real {
	return (source.x * target.y) - (source.y * target.x)
}

function angleBetween(source: Point, target: Point): real {
	return atan2(cross(source, target), dot(source, target))
}